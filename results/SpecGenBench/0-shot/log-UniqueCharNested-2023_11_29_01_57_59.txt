public class UniqueCharNested {

    //@ requires s != null;
    //@ ensures \result >= -1 && \result < s.length();
    public static int uniqueChar(String s) {
        //@ loop_invariant i >= 0 && i <= s.length();
        for (int i = 0; i < s.length(); ++i) {
            char c1 = s.charAt(i);
            //@ loop_invariant j >= i + 1 && j <= s.length();
            for (int j = i + 1; j < s.length(); ++j) {
                char c2 = s.charAt(j);
                //@ assert c1 == c2 || c1 != c2;
                if(c1 == c2)
                    break;
            }
            //@ assert j == s.length() || c1 == s.charAt(j);
            if(j == s.length())
                return i;
        }
        //@ assert \forall int k; 0 <= k < s.length(); k != i;
        return -1;
    }
    
}
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:16: error: cannot find symbol
            //@ assert j == s.length() || c1 == s.charAt(j);
                       ^
  symbol:   variable j
  location: class UniqueCharNested
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:16: error: cannot find symbol
            //@ assert j == s.length() || c1 == s.charAt(j);
                                                         ^
  symbol:   variable j
  location: class UniqueCharNested
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:17: error: cannot find symbol
            if(j == s.length())
               ^
  symbol:   variable j
  location: class UniqueCharNested
/home/max/Documents/JMLGPT/tmp/UniqueCharNested.java:20: error: cannot find symbol
        //@ assert \forall int k; 0 <= k < s.length(); k != i;
                                                            ^
  symbol:   variable i
  location: class UniqueCharNested
4 errors

