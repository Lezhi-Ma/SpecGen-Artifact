class SelfDeviding {
    //@ requires num >= 0;
    //@ ensures \result == (\forall int i; i >= 0 && i < num; isSelfDividable(i) == true);
    public static boolean isSelfDividable(int num) {
        int temp = num;
        //@ loop_invariant temp >= 0 && temp <= num;
        //@ loop_variant temp;
        while (temp > 0) {
            int digit = temp % 10;
            //@ assert digit >= 0 && digit <= 9;
            //@ assert digit == temp % 10;
            //@ assert num % digit == temp % 10;
            //@ assert (\forall int i; i >= 0 && i < temp; isSelfDividable(i) == true);
            if (digit == 0 || num % digit != 0) {
                //@ assert \result == false;
                return false;
            }
            temp /= 10;
        }
        //@ assert \result == true;
        return true;
    }
}
