class DominantIndex {
    
    //@ requires nums != null;
    //@ requires nums.length > 0;
    //@ ensures \result >= 0 && \result < nums.length;
    public static int dominantIndex(int[] nums) {
        int biggest_index = 0;

        //@ loop_invariant 0 <= i && i <= nums.length;
        //@ loop_invariant biggest_index >= 0 && biggest_index < nums.length;
        //@ loop_invariant (\forall int j; 0 <= j < i; nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[biggest_index])
                biggest_index = i;
        }

        //@ loop_invariant 0 <= i && i <= nums.length;
        //@ loop_invariant biggest_index >= 0 && biggest_index < nums.length;
        //@ loop_invariant (\forall int j; 0 <= j < i && j != biggest_index; 2 * nums[j] <= nums[biggest_index]);
        //@ decreases nums.length - i;
        for (int i = 0; i < nums.length; i++) {
            if (i != biggest_index && 2 * nums[i] > nums[biggest_index])
                return -1;
        }

        return biggest_index;
    }
}
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:5:) in method dominantIndex
                return -1;
                ^
/home/max/Documents/JMLGPT/tmp/DominantIndex.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DominantIndex.java:24:
    //@ ensures \result >= 0 && \result < nums.length;
        ^
2 verification failures

