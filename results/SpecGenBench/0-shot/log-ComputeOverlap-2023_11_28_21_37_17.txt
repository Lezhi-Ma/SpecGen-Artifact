class ComputeOverlap {
    //@ requires ax1 <= ax2 && ay1 <= ay2 && bx1 <= bx2 && by1 <= by2;
    //@ ensures \result >= 0;
    public int computeOverlapArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {
        //@ assert area1 >= 0 && area2 >= 0;
        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);
        //@ assert overlapWidth >= 0 && overlapHeight >= 0;
        int overlapWidth = (ax2 < bx2 ? ax2 : bx2) - (ax1 > bx1 ? ax1 : bx1), overlapHeight = (ay2 < by2 ? ay2 : by2) - (ay1 > by1 ? ay1 : by1);
        //@ assert overlapArea >= 0;
        int overlapArea = (overlapWidth > 0 ? overlapWidth : 0) * (overlapHeight > 0 ? overlapHeight : 0);
        //@ assert overlapArea >= 0;
        return overlapArea;
    }
}
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:5: error: cannot find symbol
        //@ assert area1 >= 0 && area2 >= 0;
                   ^
  symbol:   variable area1
  location: class ComputeOverlap
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:5: error: cannot find symbol
        //@ assert area1 >= 0 && area2 >= 0;
                                 ^
  symbol:   variable area2
  location: class ComputeOverlap
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:7: error: cannot find symbol
        //@ assert overlapWidth >= 0 && overlapHeight >= 0;
                   ^
  symbol:   variable overlapWidth
  location: class ComputeOverlap
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:7: error: cannot find symbol
        //@ assert overlapWidth >= 0 && overlapHeight >= 0;
                                        ^
  symbol:   variable overlapHeight
  location: class ComputeOverlap
/home/max/Documents/JMLGPT/tmp/ComputeOverlap.java:9: error: cannot find symbol
        //@ assert overlapArea >= 0;
                   ^
  symbol:   variable overlapArea
  location: class ComputeOverlap
5 errors

