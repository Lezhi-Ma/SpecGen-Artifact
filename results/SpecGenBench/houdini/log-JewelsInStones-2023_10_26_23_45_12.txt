class JewelsInStones {
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ non_null
    //@ non_null
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: error: Embedded block comment must terminate within the JML line comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:3: error: illegal start of type
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:5: error: ';' expected
    //@ ensures \result < 1;
               ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:5: error: Token \result is not a type
    //@ ensures \result < 1;
                ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:5: error: ';' expected
    //@ ensures \result < 1;
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:5: error: <identifier> expected
    //@ ensures \result < 1;
                         ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:5: error: illegal start of type
    //@ ensures \result < 1;
                          ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:46: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:158: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:360: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:360: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:370: error: reached end of file while parsing
13 errors

class JewelsInStones {
    //@ non_null
    //@ non_null
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:157: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:359: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:359: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:369: error: reached end of file while parsing
6 errors

class JewelsInStones {
    //@ non_null
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:156: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:358: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:358: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:368: error: reached end of file while parsing
6 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:155: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:357: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:357: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:367: error: reached end of file while parsing
5 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:154: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:356: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:356: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:366: error: reached end of file while parsing
5 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:153: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:355: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:355: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:365: error: reached end of file while parsing
4 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ non_null
    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:153: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:354: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:354: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:364: error: reached end of file while parsing
4 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:353: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:353: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:363: error: reached end of file while parsing
3 errors

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:151:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: jewelsCount == 1
    //@ requires jewelsCount == 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:150:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: jewelsCount < 1
    //@ requires jewelsCount < 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:149:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: jewelsCount <= 1
    //@ requires jewelsCount <= 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:148:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: jewelsCount >= 1
    //@ requires jewelsCount >= 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40:
    //@ ensures \result == 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:146:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: jewelsCount > 1
    //@ requires jewelsCount > 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39:
    //@ ensures \result < 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:144:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: jewelsCount < 0
    //@ requires jewelsCount < 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38:
    //@ ensures \result >= 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:142:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsCount <= 0
    //@ requires jewelsCount <= 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:141:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsCount == 0
    //@ requires jewelsCount == 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:140:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Precondition conjunct is false: jewelsCount != 1
    //@ requires jewelsCount != 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37:
    //@ ensures \result > 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:6:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36:
    //@ ensures \result == 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:137:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:24:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsCount < -1
    //@ requires jewelsCount < -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35:
    //@ ensures \result >= 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:34:
    //@ ensures \result > 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:134:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsCount <= -1
    //@ requires jewelsCount <= -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:133:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount != 0
    //@ requires jewelsCount != 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:33:
    //@ ensures \result < -1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:131:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35: verify: Precondition conjunct is false: jewelsCount >= 0
    //@ requires jewelsCount >= 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:130:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount == -1
    //@ requires jewelsCount == -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:129:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35: verify: Precondition conjunct is false: jewelsCount > 0
    //@ requires jewelsCount > 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:128:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Precondition conjunct is false: jewelsLength == jewelsCount
    //@ requires jewelsLength == jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:32:
    //@ ensures \result != -1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:8:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:31:
    //@ ensures \result == -1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:125:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsLength >= jewelsCount
    //@ requires jewelsLength >= jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:124:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsLength > jewelsCount
    //@ requires jewelsLength > jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:123:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsLength == 1
    //@ requires jewelsLength == 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:122:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: jewelsLength >= 1
    //@ requires jewelsLength >= 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:121:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: jewelsLength > 1
    //@ requires jewelsLength > 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:120:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsLength < 1
    //@ requires jewelsLength < 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:119:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:19:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsLength < 0
    //@ requires jewelsLength < 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:8:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:30:
    //@ ensures \result >= -1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:117:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:18:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: jewelsLength != 0
    //@ requires jewelsLength != 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:116:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:18:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: jewelsLength > 0
    //@ requires jewelsLength > 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29:
    //@ ensures \result <= 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:114:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: jewelsLength < -1
    //@ requires jewelsLength < -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:113:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: jewelsLength <= 1
    //@ requires jewelsLength <= 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:112:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:17:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsLength <= -1
    //@ requires jewelsLength <= -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result > -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28:
    //@ ensures \result > -1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:110:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Precondition conjunct is false: jewelsLength == -1
    //@ requires jewelsLength == -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:109:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: jewelsLength <= 0
    //@ requires jewelsLength <= 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:108:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:30: verify: Precondition conjunct is false: jewelsCount != -1
    //@ requires jewelsCount != -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:107:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:30: verify: Precondition conjunct is false: jewelsCount >= -1
    //@ requires jewelsCount >= -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:106:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:16:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:31: verify: Precondition conjunct is false: jewelsLength < jewelsCount
    //@ requires jewelsLength < jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures jewels != null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27:
    //@ ensures jewels != null ==> \result >= 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    //@ ensures stones != null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:10:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26:
    //@ ensures stones != null ==> \result >= 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:103:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:14:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:29: verify: Precondition conjunct is false: jewelsLength <= jewelsCount
    //@ requires jewelsLength <= jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:3:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:25:
    //@ ensures \result < 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:101:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:13:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35: verify: Precondition conjunct is false: stonesLength < jewelsLength
    //@ requires stonesLength < jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsCount > -1;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:100:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:13:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: Precondition conjunct is false: jewelsCount > -1
    //@ requires jewelsCount > -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:24:
    //@ ensures \result != 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:98:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:33: verify: Precondition conjunct is false: stonesLength <= jewelsLength
    //@ requires stonesLength <= jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:97:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:33: verify: Precondition conjunct is false: stonesLength == jewelsLength
    //@ requires stonesLength == jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:3:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:23:
    //@ ensures \result <= 0;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:95:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:26: verify: Precondition conjunct is false: jewelsLength != 1
    //@ requires jewelsLength != 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:94:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: stonesLength == jewelsCount
    //@ requires stonesLength == jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:93:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: stonesLength >= jewelsCount
    //@ requires stonesLength >= jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:92:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: stonesLength > jewelsCount
    //@ requires stonesLength > jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result != 1;
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:22:
    //@ ensures \result != 1;
        ^
2 verification failures

class JewelsInStones {
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:90:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:10:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: stonesLength < 1
    //@ requires stonesLength < 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures \result <= -1;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2:) in method numJewelsInStones
        return jewelsCount;
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:21:
    //@ ensures \result <= -1;
        ^
2 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:88:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:32: verify: Precondition conjunct is false: stonesLength < jewelsCount
    //@ requires stonesLength < jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:87:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:34: verify: Precondition conjunct is false: stonesLength <= 1
    //@ requires stonesLength <= 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:86:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:34: verify: Precondition conjunct is false: stonesLength == 1
    //@ requires stonesLength == 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:85:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: stonesLength < 0
    //@ requires stonesLength < 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:84:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: stonesLength <= 0
    //@ requires stonesLength <= 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:83:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: stonesLength == 0
    //@ requires stonesLength == 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:82:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:32: verify: Precondition conjunct is false: stonesLength <= jewelsCount
    //@ requires stonesLength <= jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:81:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: stonesLength < -1
    //@ requires stonesLength < -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:80:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:23: verify: Precondition conjunct is false: jewelsLength != jewelsCount
    //@ requires jewelsLength != jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:79:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: stonesLength <= -1
    //@ requires stonesLength <= -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:78:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: stonesLength == -1
    //@ requires stonesLength == -1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:77:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: i == stonesLength
    //@ requires i == stonesLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:76:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i >= stonesLength
    //@ requires i >= stonesLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:75:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i > stonesLength
    //@ requires i > stonesLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:74:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i < jewelsLength
    //@ requires i < jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:73:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i <= jewelsLength
    //@ requires i <= jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength == 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:72:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:23: verify: Precondition conjunct is false: jewelsLength == 0
    //@ requires jewelsLength == 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:71:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: i == jewelsLength
    //@ requires i == jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:70:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:30: verify: Precondition conjunct is false: stonesLength != jewelsCount
    //@ requires stonesLength != jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:69:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: Precondition conjunct is false: stonesLength >= jewelsLength
    //@ requires stonesLength >= jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:68:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i < jewelsCount
    //@ requires i < jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:67:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: Precondition conjunct is false: stonesLength > jewelsLength
    //@ requires stonesLength > jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:66:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i >= jewelsLength
    //@ requires i >= jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:65:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i > jewelsLength
    //@ requires i > jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:64:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i == jewelsCount
    //@ requires i == jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i <= jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:63:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i <= jewelsCount
    //@ requires i <= jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:62:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:61:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i >= jewelsCount
    //@ requires i >= jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:60:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i > jewelsCount
    //@ requires i > jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:59:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:58:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:57:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:56:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:55:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:54:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:48: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:53:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:48: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:52:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:48: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:51:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != jewelsCount;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:50:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i != jewelsCount
    //@ requires i != jewelsCount;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:49:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i > 1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:48:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:47:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != jewelsLength;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:46:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Precondition conjunct is false: i != jewelsLength
    //@ requires i != jewelsLength;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: Precondition conjunct is false: stonesLength != jewelsLength
    //@ requires stonesLength != jewelsLength;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: Precondition conjunct is false: stonesLength != 1
    //@ requires stonesLength != 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: Precondition conjunct is false: stonesLength > 1
    //@ requires stonesLength > 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i != -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: Precondition conjunct is false: stonesLength >= 1
    //@ requires stonesLength >= 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount == 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:237:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsCount == 1
    //@ requires jewelsCount == 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:27: verify: Precondition conjunct is false: stonesLength != 0
    //@ requires stonesLength != 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:235:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsCount >= 1
    //@ requires jewelsCount >= 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:28: verify: Precondition conjunct is false: stonesLength > 0
    //@ requires stonesLength > 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:34: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount > 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:232:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsCount > 1
    //@ requires jewelsCount > 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount < 1;
    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:231:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount < 1
    //@ requires jewelsCount < 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount <= 1;
    //@ requires jewelsCount != 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:230:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount <= 1
    //@ requires jewelsCount <= 1;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount < 0;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:229:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:12:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:37: verify: Precondition conjunct is false: jewelsCount < 0
    //@ requires jewelsCount < 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9: verify: The prover cannot establish an assertion (ExceptionalPostcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2:) in method numJewelsInStones
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:9:
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
        ^
2 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:235: verify: The prover cannot establish an assertion (ExceptionalPostcondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:229:) in method __HoudiniInvoker
        numJewelsInStones("", "ab");
                         ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:235:
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
        ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:227:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: jewelsCount != 0
    //@ requires jewelsCount != 0;
                             ^
5 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount != 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:227:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: jewelsCount != 0
    //@ requires jewelsCount != 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount > 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:226:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsCount > 0
    //@ requires jewelsCount > 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount < -1;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:225:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsCount < -1
    //@ requires jewelsCount < -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount <= -1;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:224:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsCount <= -1
    //@ requires jewelsCount <= -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount <= 0;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:223:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount <= 0
    //@ requires jewelsCount <= 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount == -1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:222:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:38: verify: Precondition conjunct is false: jewelsCount == -1
    //@ requires jewelsCount == -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength < jewelsCount;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:221:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:41: verify: Precondition conjunct is false: jewelsLength < jewelsCount
    //@ requires jewelsLength < jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength != jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:220:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:43: verify: Precondition conjunct is false: jewelsLength != jewelsCount
    //@ requires jewelsLength != jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength > jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:219:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: jewelsLength > jewelsCount
    //@ requires jewelsLength > jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount == 0;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:218:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount == 0
    //@ requires jewelsCount == 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength == 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:217:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: jewelsLength == 1
    //@ requires jewelsLength == 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength >= 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:216:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:46: verify: Precondition conjunct is false: jewelsLength >= 1
    //@ requires jewelsLength >= 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= 0;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:215:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount >= 0
    //@ requires jewelsCount >= 0;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength > 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:214:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:45: verify: Precondition conjunct is false: jewelsLength > 1
    //@ requires jewelsLength > 1;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength == jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:213:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:40: verify: Precondition conjunct is false: jewelsLength == jewelsCount
    //@ requires jewelsLength == jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength < 0;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:212:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: jewelsLength < 0
    //@ requires jewelsLength < 0;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount != -1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:211:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:36: verify: Precondition conjunct is false: jewelsCount != -1
    //@ requires jewelsCount != -1;
                             ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength >= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:210:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:39: verify: Precondition conjunct is false: jewelsLength >= jewelsCount
    //@ requires jewelsLength >= jewelsCount;
                              ^
3 verification failures

class JewelsInStones {
    //@ ensures jewels == null ==> \result >= 0;
    //@ ensures stones == null ==> \result >= 0;
    public int numJewelsInStones(String jewels, String stones) {
        int jewelsCount = 0;
        int jewelsLength = jewels.length(), stonesLength = stones.length();
        for (int i = 0; i < stonesLength; i++) {
            __Loop_Invariant_Dummy1(jewels, stones, jewelsCount, jewelsLength, stonesLength, i);
            char stone = stones.charAt(i);
            for (int j = 0; j < jewelsLength; j++) {
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                char jewel = jewels.charAt(j);
                if (stone == jewel) {
                    jewelsCount++;
                    break;
                }
            }
        }
        return jewelsCount;
    }

    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i != stonesLength;
    public static void __Loop_Invariant_Dummy1(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i) {}

    //@ requires jewelsCount != 1;
    //@ requires jewelsCount >= -1;
    //@ requires jewelsCount > -1;
    //@ requires jewelsLength <= jewelsCount;
    //@ requires jewelsLength < 1;
    //@ requires jewelsLength <= 1;
    //@ requires jewelsLength != 1;
    //@ requires jewelsLength <= 0;
    //@ requires jewelsLength == 0;
    //@ requires jewelsLength != 0;
    //@ requires jewelsLength >= 0;
    //@ requires jewelsLength > 0;
    //@ requires jewelsLength < -1;
    //@ requires jewelsLength <= -1;
    //@ requires jewelsLength == -1;
    //@ requires jewelsLength != -1;
    //@ requires jewelsLength >= -1;
    //@ requires jewelsLength > -1;
    //@ requires stonesLength < jewelsLength;
    //@ requires stonesLength <= jewelsLength;
    //@ requires stonesLength == jewelsLength;
    //@ requires stonesLength != jewelsLength;
    //@ requires stonesLength >= jewelsLength;
    //@ requires stonesLength > jewelsLength;
    //@ requires stonesLength < jewelsCount;
    //@ requires stonesLength <= jewelsCount;
    //@ requires stonesLength == jewelsCount;
    //@ requires stonesLength != jewelsCount;
    //@ requires stonesLength >= jewelsCount;
    //@ requires stonesLength > jewelsCount;
    //@ requires stonesLength < 1;
    //@ requires stonesLength <= 1;
    //@ requires stonesLength == 1;
    //@ requires stonesLength != 1;
    //@ requires stonesLength >= 1;
    //@ requires stonesLength > 1;
    //@ requires stonesLength < 0;
    //@ requires stonesLength <= 0;
    //@ requires stonesLength == 0;
    //@ requires stonesLength != 0;
    //@ requires stonesLength >= 0;
    //@ requires stonesLength > 0;
    //@ requires stonesLength < -1;
    //@ requires stonesLength <= -1;
    //@ requires stonesLength == -1;
    //@ requires stonesLength != -1;
    //@ requires stonesLength >= -1;
    //@ requires stonesLength > -1;
    //@ requires i < stonesLength;
    //@ requires i <= stonesLength;
    //@ requires i == stonesLength;
    //@ requires i != stonesLength;
    //@ requires i >= stonesLength;
    //@ requires i > stonesLength;
    //@ requires i < jewelsLength;
    //@ requires i <= jewelsLength;
    //@ requires i == jewelsLength;
    //@ requires i != jewelsLength;
    //@ requires i >= jewelsLength;
    //@ requires i > jewelsLength;
    //@ requires i < jewelsCount;
    //@ requires i <= jewelsCount;
    //@ requires i == jewelsCount;
    //@ requires i != jewelsCount;
    //@ requires i >= jewelsCount;
    //@ requires i > jewelsCount;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires stone < stonesLength;
    //@ requires stone <= stonesLength;
    //@ requires stone == stonesLength;
    //@ requires stone != stonesLength;
    //@ requires stone >= stonesLength;
    //@ requires stone > stonesLength;
    //@ requires stone < -1;
    //@ requires stone <= -1;
    //@ requires stone == -1;
    //@ requires stone != -1;
    //@ requires stone >= -1;
    //@ requires stone > -1;
    //@ requires stone < jewelsLength;
    //@ requires stone <= jewelsLength;
    //@ requires stone == jewelsLength;
    //@ requires stone != jewelsLength;
    //@ requires stone >= jewelsLength;
    //@ requires stone > jewelsLength;
    //@ requires stone < i;
    //@ requires stone <= i;
    //@ requires stone == i;
    //@ requires stone != i;
    //@ requires stone >= i;
    //@ requires stone > i;
    //@ requires stone < jewelsCount;
    //@ requires stone <= jewelsCount;
    //@ requires stone == jewelsCount;
    //@ requires stone != jewelsCount;
    //@ requires stone >= jewelsCount;
    //@ requires stone > jewelsCount;
    //@ requires stone < 1;
    //@ requires stone <= 1;
    //@ requires stone == 1;
    //@ requires stone != 1;
    //@ requires stone >= 1;
    //@ requires stone > 1;
    //@ requires stone < 0;
    //@ requires stone <= 0;
    //@ requires stone == 0;
    //@ requires stone != 0;
    //@ requires stone >= 0;
    //@ requires stone > 0;
    //@ requires j < stonesLength;
    //@ requires j <= stonesLength;
    //@ requires j == stonesLength;
    //@ requires j != stonesLength;
    //@ requires j >= stonesLength;
    //@ requires j > stonesLength;
    //@ requires j < stone;
    //@ requires j <= stone;
    //@ requires j == stone;
    //@ requires j != stone;
    //@ requires j >= stone;
    //@ requires j > stone;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < jewelsLength;
    //@ requires j <= jewelsLength;
    //@ requires j == jewelsLength;
    //@ requires j != jewelsLength;
    //@ requires j >= jewelsLength;
    //@ requires j > jewelsLength;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < jewelsCount;
    //@ requires j <= jewelsCount;
    //@ requires j == jewelsCount;
    //@ requires j != jewelsCount;
    //@ requires j >= jewelsCount;
    //@ requires j > jewelsCount;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}

    public void __HoudiniInvoker() {
        numJewelsInStones("abcde", "abcdefg");
        numJewelsInStones("a", "abc");
        numJewelsInStones("", "");
        numJewelsInStones("a", "");
        numJewelsInStones("", "ab");
    }
}

error: An error while executing a proof script for __Loop_Invariant_Dummy2: (error "Error writing to Z3 solver: org.smtlib.IVisitor$VisitorException: org.smtlib.IVisitor$VisitorException: Did not expect an empty argument list")
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:209:) in method numJewelsInStones
                __Loop_Invariant_Dummy2(jewels, stones, jewelsCount, jewelsLength, stonesLength, i, stone, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/JewelsInStones.java:11:
    public static void __Loop_Invariant_Dummy2(String jewels, String stones, int jewelsCount, int jewelsLength, int stonesLength, int i, char stone, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/JewelsInStones.java:44: verify: Precondition conjunct is false: jewelsLength != 0
    //@ requires jewelsLength != 0;
                              ^
1 error
3 verification failures

