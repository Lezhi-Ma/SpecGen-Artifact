public class FindFirstZero {

    //@ non_null
    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ non_null
    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:3: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:109: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class FindFirstZero {

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ non_null
    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class FindFirstZero {

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:89:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:197:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:3: verify: Precondition conjunct is false: 5 < x.length
    //@ requires 5 < x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:88:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:196:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:5: verify: Precondition conjunct is false: 5 != x.length
    //@ requires 5 != x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:87:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:195:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:6: verify: Precondition conjunct is false: 5 > x.length
    //@ requires 5 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:86:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:194:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:8: verify: Precondition conjunct is false: 4 == x.length
    //@ requires 4 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:85:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:193:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:9: verify: Precondition conjunct is false: 4 >= x.length
    //@ requires 4 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:84:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:192:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:9: verify: Precondition conjunct is false: 4 > x.length
    //@ requires 4 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:83:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:191:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:11: verify: Precondition conjunct is false: 3 == x.length
    //@ requires 3 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:190:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:12: verify: Precondition conjunct is false: 3 >= x.length
    //@ requires 3 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:81:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:189:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:12: verify: Precondition conjunct is false: 3 > x.length
    //@ requires 3 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:80:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:188:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:14: verify: Precondition conjunct is false: 2 == x.length
    //@ requires 2 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:79:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:187:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:15: verify: Precondition conjunct is false: 2 >= x.length
    //@ requires 2 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:78:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:186:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:15: verify: Precondition conjunct is false: 2 > x.length
    //@ requires 2 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:77:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:185:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:17: verify: Precondition conjunct is false: 1 == x.length
    //@ requires 1 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:76:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:184:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:18: verify: Precondition conjunct is false: 1 >= x.length
    //@ requires 1 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:75:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:183:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:18: verify: Precondition conjunct is false: 1 > x.length
    //@ requires 1 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:74:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:182:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:20: verify: Precondition conjunct is false: -1 == x.length
    //@ requires -1 == x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:73:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:181:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:21: verify: Precondition conjunct is false: -1 >= x.length
    //@ requires -1 >= x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires -1 > x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:72:) in method main
        FindFirstZero(arr);
                     ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:180:
    public static int FindFirstZero(int[] x) {
                      ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:21: verify: Precondition conjunct is false: -1 > x.length
    //@ requires -1 > x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 < x.length;
    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:174:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:90: verify: Precondition conjunct is false: 5 < x.length
    //@ requires 5 < x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 != x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:173:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:92: verify: Precondition conjunct is false: 5 != x.length
    //@ requires 5 != x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 5 > x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:172:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:93: verify: Precondition conjunct is false: 5 > x.length
    //@ requires 5 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 == x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:171:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:95: verify: Precondition conjunct is false: 4 == x.length
    //@ requires 4 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 4 >= x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:170:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:96: verify: Precondition conjunct is false: 4 >= x.length
    //@ requires 4 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 4 > x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:169:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:96: verify: Precondition conjunct is false: 4 > x.length
    //@ requires 4 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 == x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:168:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:98: verify: Precondition conjunct is false: 3 == x.length
    //@ requires 3 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 3 >= x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:167:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:99: verify: Precondition conjunct is false: 3 >= x.length
    //@ requires 3 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 3 > x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:166:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:99: verify: Precondition conjunct is false: 3 > x.length
    //@ requires 3 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 == x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:165:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:101: verify: Precondition conjunct is false: 2 == x.length
    //@ requires 2 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 2 >= x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:164:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:102: verify: Precondition conjunct is false: 2 >= x.length
    //@ requires 2 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 2 > x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:163:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:102: verify: Precondition conjunct is false: 2 > x.length
    //@ requires 2 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 == x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:162:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:104: verify: Precondition conjunct is false: 1 == x.length
    //@ requires 1 == x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires 1 >= x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:161:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:105: verify: Precondition conjunct is false: 1 >= x.length
    //@ requires 1 >= x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires 1 > x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:160:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:105: verify: Precondition conjunct is false: 1 > x.length
    //@ requires 1 > x.length;
                   ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 == x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:159:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:107: verify: Precondition conjunct is false: -1 == x.length
    //@ requires -1 == x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires -1 >= x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:158:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: -1 >= x.length
    //@ requires -1 >= x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires -1 > x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:157:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: -1 > x.length
    //@ requires -1 > x.length;
                    ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index == x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:156:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:110: verify: Precondition conjunct is false: index == x.length
    //@ requires index == x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index >= x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:155:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:111: verify: Precondition conjunct is false: index >= x.length
    //@ requires index >= x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index > x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:154:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:111: verify: Precondition conjunct is false: index > x.length
    //@ requires index > x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index == 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:153:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:113: verify: Precondition conjunct is false: index == 5
    //@ requires index == 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index >= 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:152:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:114: verify: Precondition conjunct is false: index >= 5
    //@ requires index >= 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index > 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:151:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:114: verify: Precondition conjunct is false: index > 5
    //@ requires index > 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index < 4;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:150:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:114: verify: Precondition conjunct is false: index < 4
    //@ requires index < 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index == 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:149:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index == 4
    //@ requires index == 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index != 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:148:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index != 4
    //@ requires index != 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:147:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index >= 4
    //@ requires index >= 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index > 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:146:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index > 4
    //@ requires index > 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index < 3;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:145:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index < 3
    //@ requires index < 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index <= 3;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:144:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index <= 3
    //@ requires index <= 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index == 3;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:143:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index == 3
    //@ requires index == 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index != 3;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:142:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index != 3
    //@ requires index != 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 3;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:141:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index >= 3
    //@ requires index >= 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index > 3;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:140:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index > 3
    //@ requires index > 3;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index < 2;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:139:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index < 2
    //@ requires index < 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index <= 2;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:138:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index <= 2
    //@ requires index <= 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index == 2;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:137:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index == 2
    //@ requires index == 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index != 2;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:136:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index != 2
    //@ requires index != 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 2;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:135:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index >= 2
    //@ requires index >= 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index > 2;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:134:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index > 2
    //@ requires index > 2;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index < 1;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:133:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index < 1
    //@ requires index < 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index <= 1;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:132:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index <= 1
    //@ requires index <= 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index == 1;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:131:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index == 1
    //@ requires index == 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index != 1;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:130:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index != 1
    //@ requires index != 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 1;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:129:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index >= 1
    //@ requires index >= 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index > 1;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:128:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index > 1
    //@ requires index > 1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index < 0;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:127:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index < 0
    //@ requires index < 0;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index <= 0;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:126:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index <= 0
    //@ requires index <= 0;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index == 0;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:125:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index == 0
    //@ requires index == 0;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index != 0;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:124:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Precondition conjunct is false: index != 0
    //@ requires index != 0;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index > 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:123:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116: verify: Precondition conjunct is false: index > 0
    //@ requires index > 0;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index < -1;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:122:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116: verify: Precondition conjunct is false: index < -1
    //@ requires index < -1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index <= -1;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:121:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116: verify: Precondition conjunct is false: index <= -1
    //@ requires index <= -1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index == -1;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:120:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116: verify: Precondition conjunct is false: index == -1
    //@ requires index == -1;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:119:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index < x.length
    //@ requires index < x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index <= x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:118:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index <= x.length
    //@ requires index <= x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:117:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index != x.length
    //@ requires index != x.length;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index < 5;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index < 5
    //@ requires index < 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index <= 5;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index <= 5
    //@ requires index <= 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index != 5;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:114:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index != 5
    //@ requires index != 5;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index <= 4;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:113:) in method FindFirstZero
            __Loop_Invariant_Dummy1(x, index);
                                   ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/FindFirstZero.java:82:
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}
                       ^
/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:108: verify: Precondition conjunct is false: index <= 4
    //@ requires index <= 4;
                       ^
3 verification failures

public class FindFirstZero {

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ ensures \result < x.length;
    //@ ensures \result <= x.length;
    //@ ensures \result == x.length;
    //@ ensures \result != x.length;
    //@ ensures \result >= x.length;
    //@ ensures \result > x.length;
    //@ ensures \result < 5;
    //@ ensures \result <= 5;
    //@ ensures \result == 5;
    //@ ensures \result != 5;
    //@ ensures \result >= 5;
    //@ ensures \result > 5;
    //@ ensures \result < 4;
    //@ ensures \result <= 4;
    //@ ensures \result == 4;
    //@ ensures \result != 4;
    //@ ensures \result >= 4;
    //@ ensures \result > 4;
    //@ ensures \result < 3;
    //@ ensures \result <= 3;
    //@ ensures \result == 3;
    //@ ensures \result != 3;
    //@ ensures \result >= 3;
    //@ ensures \result > 3;
    //@ ensures \result < 2;
    //@ ensures \result <= 2;
    //@ ensures \result == 2;
    //@ ensures \result != 2;
    //@ ensures \result >= 2;
    //@ ensures \result > 2;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x == null ==> \result >= 0;
    //@ ensures x != null ==> \result >= 0;
    public static int FindFirstZero(int[] x) {
        if (x.length == 0) {
        	return -1;
        }
		else {
			int index = 0;

			while (x.length - index > 0 && x[index] != 0) {
                __Loop_Invariant_Dummy1(x, index);
				index = index + 1;
			}
            __Loop_Invariant_Dummy1(x, index);
			if (x.length - index == 0) {
				index = -1;
			}
			return index;
        }
    }

    //@ requires 5 <= x.length;
    //@ requires 5 == x.length;
    //@ requires 5 >= x.length;
    //@ requires 4 < x.length;
    //@ requires 4 <= x.length;
    //@ requires 4 != x.length;
    //@ requires 3 < x.length;
    //@ requires 3 <= x.length;
    //@ requires 3 != x.length;
    //@ requires 2 < x.length;
    //@ requires 2 <= x.length;
    //@ requires 2 != x.length;
    //@ requires 1 < x.length;
    //@ requires 1 <= x.length;
    //@ requires 1 != x.length;
    //@ requires -1 < x.length;
    //@ requires -1 <= x.length;
    //@ requires -1 != x.length;
    //@ requires index >= 0;
    //@ requires index != -1;
    //@ requires index >= -1;
    //@ requires index > -1;
    public static void __Loop_Invariant_Dummy1(int[] x, int index) {}

	//@ requires \nonnullelements(args);
	public static void main(String[] args) {
        int[] arr = new int[]{-2, -1, 0, 1, 2};
        FindFirstZero(arr);
        arr = new int[]{0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1};
        FindFirstZero(arr);
        arr = new int[]{2, 3};
        FindFirstZero(arr);
        arr = new int[]{0, 1};
        FindFirstZero(arr);
        arr = new int[]{0, -3, 1, 10};
        FindFirstZero(arr);
        arr = new int[]{-2, -3, 0};
        FindFirstZero(arr);
        arr = new int[]{-2, -1, 8};
        FindFirstZero(arr);
        arr = new int[]{2};
        FindFirstZero(arr);
    }
}



/home/max/Documents/JMLGPT/tmp/FindFirstZero.java:78: verify: The prover cannot establish an assertion (PossiblyNegativeIndex) in method FindFirstZero
			while (x.length - index > 0 && x[index] != 0) {
			                                ^
1 verification failure

