class IsAllUnique {
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ non_null
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ non_null
    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2: error: Embedded block comment must terminate within the JML line comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:3: error: illegal start of type
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:4: error: ';' expected
    //@ ensures \result;
               ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:4: error: Token \result is not a type
    //@ ensures \result;
                ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:104: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:104: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:115: error: reached end of file while parsing
9 errors

class IsAllUnique {
    //@ non_null
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ non_null
    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:103: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:103: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:114: error: reached end of file while parsing
5 errors

class IsAllUnique {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ non_null
    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:28: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:102: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:102: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:113: error: reached end of file while parsing
4 errors

class IsAllUnique {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:101: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:101: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:112: error: reached end of file while parsing
3 errors

class IsAllUnique {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:3:) in method isAllUnique
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:25:
    //@ ensures !\result;
        ^
2 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len == 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:99:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: len == 1
    //@ requires len == 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len < 1;
    //@ requires len <= 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:98:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len < 1
    //@ requires len < 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len <= 1;
    //@ requires len != 1;
    //@ requires len >= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:97:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: len >= 1
    //@ requires len >= 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len <= 1;
    //@ requires len != 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:96:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:28: verify: Precondition conjunct is false: len != 1
    //@ requires len != 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len <= 1;
    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:95:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len <= 1
    //@ requires len <= 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len > 1;
    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:94:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len > 1
    //@ requires len > 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len < 0;
    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:93:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len < 0
    //@ requires len < 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len <= 0;
    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:92:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len <= 0
    //@ requires len <= 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len == 0;
    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:91:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len == 0
    //@ requires len == 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len < -1;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:90:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: len < -1
    //@ requires len < -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    //@ ensures str != null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:7:) in method isAllUnique
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:24:
    //@ ensures str != null ==> !\result;
        ^
2 verification failures

class IsAllUnique {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2:) in method isAllUnique
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:10:
    //@ ensures \result;
        ^
2 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    //@ ensures str != null ==> \result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:9: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:5:) in method isAllUnique
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:9:
    //@ ensures str != null ==> \result;
        ^
2 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len <= -1;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:86:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len <= -1
    //@ requires len <= -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len == -1;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:85:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:27: verify: Precondition conjunct is false: len == -1
    //@ requires len == -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num < len;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:84:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num < len
    //@ requires num < len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num != len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:83:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:32: verify: Precondition conjunct is false: num != len
    //@ requires num != len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num >= len;
    //@ requires num > len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:82:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:33: verify: Precondition conjunct is false: num > len
    //@ requires num > len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= len;
    //@ requires num == len;
    //@ requires num >= len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:81:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num <= len
    //@ requires num <= len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num == len;
    //@ requires num >= len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:80:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num == len
    //@ requires num == len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= len;
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:79:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= len;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:78:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num >= len
    //@ requires num >= len;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:77:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:76:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num == 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:75:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len != 0;
    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:74:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:24: verify: Precondition conjunct is false: len != 0
    //@ requires len != 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:73:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:72:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num > 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:71:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len > 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:70:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:25: verify: Precondition conjunct is false: len > 0
    //@ requires len > 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:69:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:30: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:68:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:67:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:66:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:65:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i == len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:64:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:36: verify: Precondition conjunct is false: i == len
    //@ requires i == len;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i >= len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:63:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i >= len
    //@ requires i >= len;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i > len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:62:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i > len
    //@ requires i > len;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < num;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:61:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i < num
    //@ requires i < num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i != num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:60:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:39: verify: Precondition conjunct is false: i != num
    //@ requires i != num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i > num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:59:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:40: verify: Precondition conjunct is false: i > num
    //@ requires i > num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:58:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:42: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:57:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num <= 0;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:56:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:28: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:55:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:41: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i == num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:54:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:36: verify: Precondition conjunct is false: i == num
    //@ requires i == num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:53:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:40: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:52:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:40: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:51:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:42: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:50:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:28: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:49:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:48:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:41: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i >= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:47:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:34: verify: Precondition conjunct is false: i >= num
    //@ requires i >= num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires num > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:46:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:29: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= num;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:45:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:32: verify: Precondition conjunct is false: i <= num
    //@ requires i <= num;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires num != -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:44:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:28: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:43:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:42:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:41:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:37: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:40:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:31: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:39:) in method isAllUnique
            __Loop_Invariant_Dummy1(str, len, num, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsAllUnique.java:12:
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:34: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class IsAllUnique {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures str == null ==> \result;
    //@ ensures str == null ==> !\result;
    public static boolean isAllUnique(String str) {
        int len = str.length();
        if (len > 26) {
            return false;
        }
        int num = 0;
        for (int i = 0; i < len; i++) {
            __Loop_Invariant_Dummy1(str, len, num, i);
            char c = str.charAt(i);
            int index = c - 'a';
            if ((num & (1 << index)) != 0) {
                return false;
            } else {
                num |= (1 << index);
            }
        }
        return true;
    }

    //@ requires len >= 0;
    //@ requires len != -1;
    //@ requires len >= -1;
    //@ requires len > -1;
    //@ requires i < len;
    //@ requires i <= len;
    //@ requires i != len;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i >= 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1 (String str, int len, int num, int i) {}
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isAllUnique("");
        isAllUnique("a");
        isAllUnique("aabb");
        isAllUnique("ab");
        isAllUnique("qabababc");
        isAllUnique("dagvwhfejrk");
    }
}

/home/max/Documents/JMLGPT/tmp/IsAllUnique.java:15: verify: The prover cannot establish an assertion (PossiblyLargeShift) in method isAllUnique
            if ((num & (1 << index)) != 0) {
                          ^
1 verification failure

