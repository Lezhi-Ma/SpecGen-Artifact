class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:127:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:4: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:44:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:126:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:5: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:125:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:5: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:124:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:7: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:123:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:122:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:121:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:10: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:120:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:37:) in method main
        digitRoot(-2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:119:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:70:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:69:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:68:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:67:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:66:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:65:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:64:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:63:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:62:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:61:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:60:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:59:) in method digitRoot
            __Loop_Invariant_Dummy1(num);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:58:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:57:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:56:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:55:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num <= -1;
    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:54:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:97:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num <= 1;
    //@ requires num == 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:96:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num == 1
    //@ requires num == 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    //@ requires num != -1;
    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:53:) in method digitRoot
        __Loop_Invariant_Dummy1(num);
                               ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    public static void __Loop_Invariant_Dummy1(int num) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num >= 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:94:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num >= 1
    //@ requires num >= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:93:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num > 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:92:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num > 1
    //@ requires num > 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:91:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num != 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:90:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num > 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:89:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:58: verify: Precondition conjunct is false: num > 0
    //@ requires num > 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:88:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num == 0;
    //@ requires num >= 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:87:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: num == 0
    //@ requires num == 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:86:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num <= -1;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:85:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num == -1;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:84:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Precondition conjunct is false: num == -1
    //@ requires num == -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum == num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:83:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:61: verify: Precondition conjunct is false: sum == num
    //@ requires sum == num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum >= num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:82:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:62: verify: Precondition conjunct is false: sum >= num
    //@ requires sum >= num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum > num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:81:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:62: verify: Precondition conjunct is false: sum > num
    //@ requires sum > num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum == 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:80:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:64: verify: Precondition conjunct is false: sum == 1
    //@ requires sum == 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < num;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:49:
    //@ ensures \result < num;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum >= 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:78:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:44:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:64: verify: Precondition conjunct is false: sum >= 1
    //@ requires sum >= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum > 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:77:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:64: verify: Precondition conjunct is false: sum > 1
    //@ requires sum > 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum == 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:76:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:44:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:66: verify: Precondition conjunct is false: sum == 0
    //@ requires sum == 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum >= 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:75:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:67: verify: Precondition conjunct is false: sum >= 0
    //@ requires sum >= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum > 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:74:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:67: verify: Precondition conjunct is false: sum > 0
    //@ requires sum > 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != 1;
    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:73:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result == num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:12:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:48:
    //@ ensures \result == num;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum == -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:71:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:67: verify: Precondition conjunct is false: sum == -1
    //@ requires sum == -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num >= 0;
    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:70:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num >= 0
    //@ requires num >= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum < num;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:69:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Precondition conjunct is false: sum < num
    //@ requires sum < num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != -1;
    //@ requires num >= -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:68:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Precondition conjunct is false: num >= -1
    //@ requires num >= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum < 0;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:67:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Precondition conjunct is false: sum < 0
    //@ requires sum < 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num != -1;
    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:66:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum < -1;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:65:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:60: verify: Precondition conjunct is false: sum < -1
    //@ requires sum < -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum != num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:64:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Precondition conjunct is false: sum != num
    //@ requires sum != num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum >= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:63:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:61: verify: Precondition conjunct is false: sum >= -1
    //@ requires sum >= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum < 1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:62:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Precondition conjunct is false: sum < 1
    //@ requires sum < 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum != -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:61:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Precondition conjunct is false: sum != -1
    //@ requires sum != -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result >= num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:13:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:47:
    //@ ensures \result >= num;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= num;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:59:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: sum <= num
    //@ requires sum <= num;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    //@ requires sum > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:58:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Precondition conjunct is false: sum > -1
    //@ requires sum > -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum <= 1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:57:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: sum <= 1
    //@ requires sum <= 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum != 1;
    //@ requires sum <= 0;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:56:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Precondition conjunct is false: sum <= 0
    //@ requires sum <= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum != 1;
    //@ requires sum != 0;
    //@ requires sum <= -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:55:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Precondition conjunct is false: sum != 0
    //@ requires sum != 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum != 1;
    //@ requires sum <= -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:54:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Precondition conjunct is false: sum <= -1
    //@ requires sum <= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    //@ requires sum != 1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:53:) in method digitRoot
                __Loop_Invariant_Dummy2(num, sum);
                                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Precondition conjunct is false: sum != 1
    //@ requires sum != 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    //@ requires num > -1;
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:52:) in method digitRoot
            __Loop_Invariant_Dummy2(num, sum);
                                   ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:
    public static void __Loop_Invariant_Dummy2(int num, int sum) {}
                       ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:51: verify: Precondition conjunct is false: num > -1
    //@ requires num > -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= num;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:46:
    //@ ensures \result <= num;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result > num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:12:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:45:
    //@ ensures \result > num;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:14:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:44:
    //@ ensures \result == 1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:15:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:
    //@ ensures \result >= 1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:15:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:
    //@ ensures \result > 1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:17:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    //@ ensures \result == 0;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:12:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    //@ ensures \result < 1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:17:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    //@ ensures \result >= 0;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:17:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    //@ ensures \result > 0;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:19:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:37:
    //@ ensures \result == -1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:17:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:36:
    //@ ensures \result < -1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:18:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:35:
    //@ ensures \result != -1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:19:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:34:
    //@ ensures \result > -1;
        ^
2 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:18:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:33:
    //@ ensures \result >= -1;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:20:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:43:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != num;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:32:
    //@ ensures \result != num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:19:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:42:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:12:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:31:
    //@ ensures \result != 1;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:18:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:41:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:30:
    //@ ensures \result <= 1;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:17:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:40:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:29:
    //@ ensures \result < 0;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:16:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:39:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:28:
    //@ ensures \result <= 0;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:15:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:38:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:27:
    //@ ensures \result != 0;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:14:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:37:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures \result <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:26:
    //@ ensures \result <= -1;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:13:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:36:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num < -1;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:12:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:35:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Precondition conjunct is false: num < -1
    //@ requires num < -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ requires num != -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:11:) in method main
        digitRoot(-1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:34:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:9: verify: Precondition conjunct is false: num != -1
    //@ requires num != -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num < 0;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:10:) in method main
        digitRoot(0);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:34:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:5: verify: Precondition conjunct is false: num < 0
    //@ requires num < 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num != 0;
    //@ requires num <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:9:) in method main
        digitRoot(0);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:33:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:6: verify: Precondition conjunct is false: num != 0
    //@ requires num != 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ requires num <= -1;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:8:) in method main
        digitRoot(0);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:32:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:6: verify: Precondition conjunct is false: num <= -1
    //@ requires num <= -1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    //@ ensures num >= 0 ==> \result >= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:6:) in method digitRoot
        return num;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:20:
    //@ ensures num >= 0 ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:7:) in method main
        digitRoot(1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:32:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:2: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
5 verification failures

class DigitRoot {
    //@ requires num < 1;
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:6:) in method main
        digitRoot(1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:31:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:2: verify: Precondition conjunct is false: num < 1
    //@ requires num < 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num <= 1;
    //@ requires num != 1;
    //@ requires num <= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:5:) in method main
        digitRoot(1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:30:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:3: verify: Precondition conjunct is false: num != 1
    //@ requires num != 1;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num <= 1;
    //@ requires num <= 0;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:4:) in method main
        digitRoot(1);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:29:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:3: verify: Precondition conjunct is false: num <= 0
    //@ requires num <= 0;
                     ^
3 verification failures

class DigitRoot {
    //@ requires num <= 1;
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}


/home/max/Documents/JMLGPT/tmp/DigitRoot.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:3:) in method main
        digitRoot(2);
                 ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/DigitRoot.java:29:
    public static int digitRoot(int num) {
                      ^
/home/max/Documents/JMLGPT/tmp/DigitRoot.java:2: verify: Precondition conjunct is false: num <= 1
    //@ requires num <= 1;
                     ^
3 verification failures

class DigitRoot {
    public static int digitRoot(int num) {
        while (num >= 10) {
            __Loop_Invariant_Dummy1(num);
            int sum = 0;
            while (num > 0) {
                __Loop_Invariant_Dummy2(num, sum);
                sum += num % 10;
                num /= 10;
            }
            __Loop_Invariant_Dummy2(num, sum);
            num = sum;
        }
        __Loop_Invariant_Dummy1(num);
        return num;
    }

    public static void __Loop_Invariant_Dummy1(int num) {}

    public static void __Loop_Invariant_Dummy2(int num, int sum) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        digitRoot(-2);
        digitRoot(-1);
        digitRoot(0);
        digitRoot(1);
        digitRoot(2);
        digitRoot(12);
        digitRoot(4);
        digitRoot(5);
        digitRoot(114);
        digitRoot(514);
        digitRoot(1919);
        digitRoot(810);
    }
}



