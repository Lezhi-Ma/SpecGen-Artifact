
public class Calculator {
    
    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires operator < 1;
    //@ requires operator <= 1;
    //@ requires operator == 1;
    //@ requires operator != 1;
    //@ requires operator >= 1;
    //@ requires operator > 1;
    //@ requires operator < 0;
    //@ requires operator <= 0;
    //@ requires operator == 0;
    //@ requires operator != 0;
    //@ requires operator >= 0;
    //@ requires operator > 0;
    //@ requires operator < num2;
    //@ requires operator <= num2;
    //@ requires operator == num2;
    //@ requires operator != num2;
    //@ requires operator >= num2;
    //@ requires operator > num2;
    //@ requires operator < -1;
    //@ requires operator <= -1;
    //@ requires operator == -1;
    //@ requires operator != -1;
    //@ requires operator >= -1;
    //@ requires operator > -1;
    //@ requires operator < num1;
    //@ requires operator <= num1;
    //@ requires operator == num1;
    //@ requires operator != num1;
    //@ requires operator >= num1;
    //@ requires operator > num1;
    //@ ensures \result < operator;
    //@ ensures \result <= operator;
    //@ ensures \result == operator;
    //@ ensures \result != operator;
    //@ ensures \result >= operator;
    //@ ensures \result > operator;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    //@ ensures operator >= 0 ==> \result >= 0;
    public static int calculate(int num1, int num2, char operator) {

        int output;

        switch (operator)
        {
            case '+':
            	output = num1 + num2;
                break;

            case '-':
            	output = num1 - num2;
                break;

            case '*':
            	output = num1 * num2;
                break;

            case '/':
            	output = num1 / num2;
		break;

	    case '%':
		output = num1 % num2;
                break;

            default:
                return -1;
        }
        return output;
    }

        //@ requires \nonnullelements(args);
        public static void main(String[] args) {
        calculate(-4, 0, '+');
        calculate(0, -4, '+');
        calculate(4, 0, '-');
        calculate(0, 4, '*');
        calculate(-4, -4, '+');
        calculate(4, 4, '/');
        calculate(0, 0, '+');
        calculate(-4, 4, '*');
        calculate(4, -4, '/');
        calculate(1, -1, '*');
        calculate(-1, 1, '+');
        calculate(114, 514, '-');
        calculate(514, -114, '*');
        calculate(114, -514, '+');
        calculate(514, 114, '/');
    }
}


java.lang.OutOfMemoryError: Java heap space
	at java.base/java.util.HashMap.newNode(HashMap.java:1888)
	at java.base/java.util.HashMap.putVal(HashMap.java:631)
	at java.base/java.util.HashMap.putMapEntries(HashMap.java:516)
	at java.base/java.util.HashMap.putAll(HashMap.java:785)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2$VarMap.putAll(BasicBlocker2.java:2511)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.initMap(BasicBlocker2.java:809)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:545)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.setCurrentBlock(BasicBlocker2.java:152)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.startBlock(BasicBlockerParent.java:463)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:404)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.visitTry(BasicBlockerParent.java:1048)
	at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCTry.accept(JCTree.java:1401)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processStats(BasicBlockerParent.java:426)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processCurrentBlock(BasicBlockerParent.java:418)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlock(BasicBlockerParent.java:405)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlockerParent.processBlocks(BasicBlockerParent.java:352)
	at jdk.compiler/org.jmlspecs.openjml.esc.BasicBlocker2.convertMethodBody(BasicBlocker2.java:617)
	at jdk.compiler/org.jmlspecs.openjml.esc.MethodProverSMT.prove(MethodProverSMT.java:361)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.doMethod(JmlEsc.java:329)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitMethodDef(JmlEsc.java:221)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlMethodDecl(JmlTreeScanner.java:238)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlMethodDecl.accept(JmlTree.java:1383)
	at jdk.compiler/com.sun.tools.javac.tree.TreeScanner.scan(TreeScanner.java:49)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.scan(JmlTreeScanner.java:70)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.visitClassDef(JmlEsc.java:169)
	at jdk.compiler/org.jmlspecs.openjml.visitors.JmlTreeScanner.visitJmlClassDecl(JmlTreeScanner.java:106)
	at jdk.compiler/org.jmlspecs.openjml.JmlTree$JmlClassDecl.accept(JmlTree.java:1295)
	at jdk.compiler/org.jmlspecs.openjml.esc.JmlEsc.check(JmlEsc.java:117)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.esc(JmlCompiler.java:536)
	at jdk.compiler/com.sun.tools.javac.main.JmlCompiler.flow(JmlCompiler.java:362)
	at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:936)
/home/max/Documents/JMLGPT/tmp/Calculator.java:148: error: A catastrophic JML internal error occurred.  Please report the bug with as much information as you can.
        public static void main(String[] args) {
                           ^
  Reason: Prover aborted with exception: ZZZZZ
1 error

