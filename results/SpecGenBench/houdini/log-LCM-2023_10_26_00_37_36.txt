public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:77:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:180:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Precondition conjunct is false: num1 == 1
    //@ requires num1 == 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:76:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:179:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:6: verify: Precondition conjunct is false: num1 >= 1
    //@ requires num1 >= 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:75:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:178:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:6: verify: Precondition conjunct is false: num1 > 1
    //@ requires num1 > 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:74:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:177:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:8: verify: Precondition conjunct is false: num1 == 0
    //@ requires num1 == 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:73:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:176:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:9: verify: Precondition conjunct is false: num1 >= 0
    //@ requires num1 >= 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:72:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:175:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:9: verify: Precondition conjunct is false: num1 > 0
    //@ requires num1 > 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:71:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:174:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:11: verify: Precondition conjunct is false: num1 == -1
    //@ requires num1 == -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:70:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:173:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: verify: Precondition conjunct is false: num1 >= -1
    //@ requires num1 >= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:69:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:172:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: verify: Precondition conjunct is false: num1 > -1
    //@ requires num1 > -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:68:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:171:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:14: verify: Precondition conjunct is false: num2 == 1
    //@ requires num2 == 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:67:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:170:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Precondition conjunct is false: num2 >= 1
    //@ requires num2 >= 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:66:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:169:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Precondition conjunct is false: num2 > 1
    //@ requires num2 > 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:65:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:168:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:15: verify: Precondition conjunct is false: num2 < 0
    //@ requires num2 < 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:64:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:167:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:17: verify: Precondition conjunct is false: num2 != 0
    //@ requires num2 != 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:63:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:166:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: Precondition conjunct is false: num2 > 0
    //@ requires num2 > 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:62:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:165:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: Precondition conjunct is false: num2 < -1
    //@ requires num2 < -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:61:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:164:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: Precondition conjunct is false: num2 <= -1
    //@ requires num2 <= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:60:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:163:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: Precondition conjunct is false: num2 == -1
    //@ requires num2 == -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:59:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:162:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:21: verify: Precondition conjunct is false: num2 < num1
    //@ requires num2 < num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:58:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:161:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:21: verify: Precondition conjunct is false: num2 <= num1
    //@ requires num2 <= num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:57:) in method __HoudiniInvoker
        lcm(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:160:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:21: verify: Precondition conjunct is false: num2 == num1
    //@ requires num2 == num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:26:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:59:
    //@ ensures \result == 1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:27:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:58:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:27:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:57:
    //@ ensures \result > 1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:29:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:56:
    //@ ensures \result == 0;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:30:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:55:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:30:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:54:
    //@ ensures \result > 0;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result == num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:32:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:53:
    //@ ensures \result == num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result >= num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:33:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:52:
    //@ ensures \result >= num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result > num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:33:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:51:
    //@ ensures \result > num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:33:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:50:
    //@ ensures \result < -1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:35:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:49:
    //@ ensures \result != -1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:36:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:48:
    //@ ensures \result > -1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < num1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:36:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:47:
    //@ ensures \result < num1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result <= num1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:36:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:46:
    //@ ensures \result <= num1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result == num1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:36:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:45:
    //@ ensures \result == num1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    //@ ensures num2 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:40:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    //@ ensures num2 >= 0 ==> \result >= 0;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:40:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:144:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:6: verify: Precondition conjunct is false: num1 < 0
    //@ requires num1 < 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:39:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:143:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:7: verify: Precondition conjunct is false: num1 != 0
    //@ requires num1 != 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:38:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:142:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:7: verify: Precondition conjunct is false: num1 < -1
    //@ requires num1 < -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 <= -1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:37:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:141:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:7: verify: Precondition conjunct is false: num1 <= -1
    //@ requires num1 <= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:36:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:140:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: verify: Precondition conjunct is false: num2 == 0
    //@ requires num2 == 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 >= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:35:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:139:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:12: verify: Precondition conjunct is false: num2 >= 0
    //@ requires num2 >= 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:34:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:138:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: verify: Precondition conjunct is false: num2 >= -1
    //@ requires num2 >= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:33:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:137:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: verify: Precondition conjunct is false: num2 > -1
    //@ requires num2 > -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:32:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:136:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:14: verify: Precondition conjunct is false: num2 >= num1
    //@ requires num2 >= num1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:22:) in method lcm
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/LCM.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:57:
    //@ ensures \result < num2;
        ^
5 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ requires num2 > num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:31:) in method __HoudiniInvoker
        lcm(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:135:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:14: verify: Precondition conjunct is false: num2 > num1
    //@ requires num2 > num1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:131:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:45:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: Precondition conjunct is false: num1 < 1
    //@ requires num1 < 1;
                      ^
6 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:130:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Precondition conjunct is false: num1 < 1
    //@ requires num1 < 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 <= 1;
    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:129:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Precondition conjunct is false: num1 <= 1
    //@ requires num1 <= 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 == 1;
    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:128:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Precondition conjunct is false: num1 == 1
    //@ requires num1 == 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 < 0;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:127:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Precondition conjunct is false: num1 < 0
    //@ requires num1 < 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 <= 0;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:126:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Precondition conjunct is false: num1 <= 0
    //@ requires num1 <= 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 == 0;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:125:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Precondition conjunct is false: num1 == 0
    //@ requires num1 == 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 < -1;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:124:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:64: verify: Precondition conjunct is false: num1 < -1
    //@ requires num1 < -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 <= -1;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:123:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:64: verify: Precondition conjunct is false: num1 <= -1
    //@ requires num1 <= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 == -1;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:122:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:44:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:64: verify: Precondition conjunct is false: num1 == -1
    //@ requires num1 == -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < num2;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:20:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:33:
    //@ ensures \result < num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:120:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:43:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:66: verify: Precondition conjunct is false: num2 < 1
    //@ requires num2 < 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= num2;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:20:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:32:
    //@ ensures \result <= num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 <= 1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:118:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Precondition conjunct is false: num2 <= 1
    //@ requires num2 <= 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 == 1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:117:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Precondition conjunct is false: num2 == 1
    //@ requires num2 == 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 < 0;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:116:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:68: verify: Precondition conjunct is false: num2 < 0
    //@ requires num2 < 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 <= 0;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:115:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:68: verify: Precondition conjunct is false: num2 <= 0
    //@ requires num2 <= 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 == 0;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:114:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:68: verify: Precondition conjunct is false: num2 == 0
    //@ requires num2 == 0;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 < -1;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:113:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Precondition conjunct is false: num2 < -1
    //@ requires num2 < -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 <= -1;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:112:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Precondition conjunct is false: num2 <= -1
    //@ requires num2 <= -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 == -1;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:111:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Precondition conjunct is false: num2 == -1
    //@ requires num2 == -1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 == num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:110:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: num2 == num1
    //@ requires num2 == num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires num2 >= num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:109:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:77: verify: Precondition conjunct is false: num2 >= num1
    //@ requires num2 >= num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 < num1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:108:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:42:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:74: verify: Precondition conjunct is false: num2 < num1
    //@ requires num2 < num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result >= num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:25:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:31:
    //@ ensures \result >= num1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires num2 > num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:106:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:75: verify: Precondition conjunct is false: num2 > num1
    //@ requires num2 > num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires result < 1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:105:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:75: verify: Precondition conjunct is false: result < 1
    //@ requires result < 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result == 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:104:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: result == 1
    //@ requires result == 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 <= num1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:103:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Precondition conjunct is false: num2 <= num1
    //@ requires num2 <= num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result >= 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:102:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: result >= 1
    //@ requires result >= 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result > 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:101:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: result > 1
    //@ requires result > 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result < 0;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:100:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: result < 0
    //@ requires result < 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result != 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:99:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:41:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:78: verify: Precondition conjunct is false: result != 0
    //@ requires result != 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures \result > num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:25:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    //@ ensures \result > num1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result <= 0;
    //@ requires result == 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:97:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:40:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Precondition conjunct is false: result == 0
    //@ requires result == 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 1;
    //@ requires result != 1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:96:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:40:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Precondition conjunct is false: result <= 1
    //@ requires result <= 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result != 1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:95:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:40:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Precondition conjunct is false: result != 1
    //@ requires result != 1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    //@ ensures num1 >= 0 ==> \result >= 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:25:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:29:
    //@ ensures num1 >= 0 ==> \result >= 0;
        ^
2 verification failures

public class LCM {

    //@ requires num1 < 1;
    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:25:) in method __HoudiniInvoker
        lcm(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:98:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Precondition conjunct is false: num1 < 1
    //@ requires num1 < 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:93:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:39:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:72: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 <= 1;
    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:24:) in method __HoudiniInvoker
        lcm(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:97:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Precondition conjunct is false: num1 <= 1
    //@ requires num1 <= 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:92:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:38:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Precondition conjunct is false: result > 0
    //@ requires result > 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 <= 0;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:23:) in method __HoudiniInvoker
        lcm(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:96:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:4: verify: Precondition conjunct is false: num1 <= 0
    //@ requires num1 <= 0;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:91:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:37:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Precondition conjunct is false: result >= 0
    //@ requires result >= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 != -1;
    //@ requires num2 < 1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:22:) in method __HoudiniInvoker
        lcm(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:96:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Precondition conjunct is false: num2 < 1
    //@ requires num2 < 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:90:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:36:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:69: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 != -1;
    //@ requires num2 <= 1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:21:) in method __HoudiniInvoker
        lcm(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:95:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Precondition conjunct is false: num2 <= 1
    //@ requires num2 <= 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:89:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:35:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:68: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ requires num2 <= 0;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:20:) in method __HoudiniInvoker
        lcm(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:94:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:6: verify: Precondition conjunct is false: num2 <= 0
    //@ requires num2 <= 0;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:88:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:34:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:67: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ requires num2 != -1;
    //@ requires num2 != num1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:19:) in method __HoudiniInvoker
        lcm(-4, -4);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:94:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:7: verify: Precondition conjunct is false: num2 != num1
    //@ requires num2 != num1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:87:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:33:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:66: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != 1;
    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ requires num2 != -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:18:) in method __HoudiniInvoker
        lcm(1, -1);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:98:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Precondition conjunct is false: num1 != 1
    //@ requires num1 != 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:86:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:32:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
6 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ requires num2 != -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:17:) in method __HoudiniInvoker
        lcm(1, -1);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:97:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Precondition conjunct is false: num2 != -1
    //@ requires num2 != -1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:85:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:31:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:45: verify: Precondition conjunct is false: num1 != 1
    //@ requires num1 != 1;
                      ^
6 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result > 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:84:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Precondition conjunct is false: result > 0
    //@ requires result > 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 != 1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:83:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:53: verify: Precondition conjunct is false: num2 != 1
    //@ requires num2 != 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result == num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:82:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:66: verify: Precondition conjunct is false: result == num2
    //@ requires result == num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 > 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:81:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: Precondition conjunct is false: num2 > 1
    //@ requires num2 > 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 != 1;
    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:80:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:44: verify: Precondition conjunct is false: num1 != 1
    //@ requires num1 != 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result <= 0;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:79:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result <= 0
    //@ requires result <= 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires num2 != num1;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:78:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: Precondition conjunct is false: num2 != num1
    //@ requires num2 != num1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result < num2;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:77:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result < num2
    //@ requires result < num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result <= num2;
    //@ requires result != num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:76:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Precondition conjunct is false: result != num2
    //@ requires result != num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result <= num2;
    //@ requires result >= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:75:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Precondition conjunct is false: result >= num2
    //@ requires result >= num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result <= num2;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:74:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result <= num2
    //@ requires result <= num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result > num2;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:73:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result > num2
    //@ requires result > num2;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result < -1;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:72:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result < -1
    //@ requires result < -1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result <= -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:71:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Precondition conjunct is false: result <= -1
    //@ requires result <= -1;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= 0;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:70:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: Precondition conjunct is false: result >= 0
    //@ requires result >= 0;
                        ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 > 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:69:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:45: verify: Precondition conjunct is false: num1 > 1
    //@ requires num1 > 1;
                      ^
3 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:5:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:39:
    //@ ensures \result < 1;
        ^
2 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result != num2;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:10:) in method lcm
            return -1;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:18:
    //@ ensures \result != num2;
        ^
2 verification failures

public class LCM {

    //@ requires num1 != -1;
    //@ requires num2 != 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:14:) in method __HoudiniInvoker
        lcm(-1, 1);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:79:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Precondition conjunct is false: num1 != -1
    //@ requires num1 != -1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:66:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:28:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: Precondition conjunct is false: result == -1
    //@ requires result == -1;
                        ^
6 verification failures

public class LCM {

    //@ requires num2 != 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:13:) in method __HoudiniInvoker
        lcm(-1, 1);
           ^
/home/max/Documents/JMLGPT/tmp/LCM.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:78:
    public  int lcm(int num1, int num2) 
                ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Precondition conjunct is false: num2 != 1
    //@ requires num2 != 1;
                      ^
/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:65:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:27:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:55: verify: Precondition conjunct is false: result == -1
    //@ requires result == -1;
                        ^
6 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result == -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:64:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: Precondition conjunct is false: result == -1
    //@ requires result == -1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result != -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:63:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: Precondition conjunct is false: result != -1
    //@ requires result != -1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result == num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:62:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Precondition conjunct is false: result == num1
    //@ requires result == num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result < num1;
    //@ requires result <= num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:61:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: Precondition conjunct is false: result < num1
    //@ requires result < num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result <= num1;
    //@ requires result != num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:60:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: Precondition conjunct is false: result != num1
    //@ requires result != num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result <= num1;
    //@ requires result >= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:59:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: Precondition conjunct is false: result >= num1
    //@ requires result >= num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result <= num1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:58:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: Precondition conjunct is false: result <= num1
    //@ requires result <= num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    //@ requires result > num1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:57:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: Precondition conjunct is false: result > num1
    //@ requires result > num1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result >= -1;
    //@ requires result > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:56:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: Precondition conjunct is false: result >= -1
    //@ requires result >= -1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    //@ requires result > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LCM.java:55:) in method lcm
            __Loop_Invariant_Dummy1(num1, num2, result);
                                   ^
/home/max/Documents/JMLGPT/tmp/LCM.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:26:
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
                       ^
/home/max/Documents/JMLGPT/tmp/LCM.java:54: verify: Precondition conjunct is false: result > -1
    //@ requires result > -1;
                        ^
3 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result != num1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:11:) in method lcm
        return -1;
        ^
/home/max/Documents/JMLGPT/tmp/LCM.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:37:
    //@ ensures \result != num1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:3:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:34:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:4:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:33:
    //@ ensures \result < 0;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:4:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:32:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:6:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:31:
    //@ ensures \result == -1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:5:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:30:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result >= -1;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:5:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:29:
    //@ ensures \result >= -1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 1;
    //@ ensures \result != 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:3:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:28:
    //@ ensures \result != 1;
        ^
2 verification failures

public class LCM {

    //@ ensures \result != 0;
    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/LCM.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LCM.java:3:) in method lcm
            return result;
            ^
/home/max/Documents/JMLGPT/tmp/LCM.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LCM.java:27:
    //@ ensures \result != 0;
        ^
2 verification failures

public class LCM {

    public  int lcm(int num1, int num2) 
    {
        if (num1 == 0 || num2 == 0) {
            return -1;
        }	
        if (num1 < 0)
            num1 = -num1;
        if (num2 < 0)
            num2 = -num2;

        int result = (num1 > num2) ? num1 : num2;

        while (result < Integer.MAX_VALUE)
        {
            __Loop_Invariant_Dummy1(num1, num2, result);
            if (result % num1 == 0 && result % num2 == 0)
            {
                break;
            }
            result++;
        }

        if (result % num1 == 0 && result % num2 == 0) {
            return result;
        }
        return -1;
    }

    //@ requires num1 >= 1;
    //@ requires num1 != 0;
    //@ requires num1 >= 0;
    //@ requires num1 > 0;
    //@ requires num1 != -1;
    //@ requires num1 >= -1;
    //@ requires num1 > -1;
    //@ requires num2 >= 1;
    //@ requires num2 != 0;
    //@ requires num2 >= 0;
    //@ requires num2 > 0;
    //@ requires num2 != -1;
    //@ requires num2 >= -1;
    //@ requires num2 > -1;
    public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

    public void __HoudiniInvoker() {
        lcm(-4, 0);
        lcm(0, -4);
        lcm(4, 0);
        lcm(0, 4);
        lcm(-4, -4);
        lcm(4, 4);
        lcm(0, 0);
        lcm(-4, 4);
        lcm(4, -4);
        lcm(1, -1);
        lcm(-1, 1);
    }
}



