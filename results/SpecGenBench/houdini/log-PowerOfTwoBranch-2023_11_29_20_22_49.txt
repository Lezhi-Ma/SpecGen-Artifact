class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:24:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:36:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:4: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:35:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:5: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:22:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:34:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:5: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:33:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:5: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:20:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:32:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:31:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:18:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:30:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:17:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:29:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16:) in method main
        isPowerOfTwo(0);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:28:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:11:) in method isPowerOfTwo
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:17:
    //@ ensures \result;
        ^
2 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:12:) in method isPowerOfTwo
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16:
    //@ ensures n >= 0 ==> \result;
        ^
2 verification failures

class PowerOfTwoBranch {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:13:) in method main
        isPowerOfTwo(1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:26:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:12:) in method main
        isPowerOfTwo(1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:25:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:11:) in method main
        isPowerOfTwo(1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:24:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:10:) in method main
        isPowerOfTwo(1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7:) in method isPowerOfTwo
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:16:
    //@ ensures !\result;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:9:) in method main
        isPowerOfTwo(2);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:23:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
5 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7:) in method isPowerOfTwo
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:15:
    //@ ensures n >= 0 ==> !\result;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8:) in method main
        isPowerOfTwo(2);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:22:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
5 verification failures

class PowerOfTwoBranch {
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7:) in method main
        isPowerOfTwo(2);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:6:) in method main
        isPowerOfTwo(-1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:21:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:5:) in method main
        isPowerOfTwo(-1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:20:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:4:) in method main
        isPowerOfTwo(-1);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    //@ requires n >= -1;
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3:) in method main
        isPowerOfTwo(-2);
                    ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:19:
    public static boolean isPowerOfTwo(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfTwoBranch.java:2: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
3 verification failures

class PowerOfTwoBranch {
    public static boolean isPowerOfTwo(int n) {
        if (n <= 0) {
            return false;
        }
        if ((n & (n - 1)) != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfTwo(0);
        isPowerOfTwo(1);
        isPowerOfTwo(2);
        isPowerOfTwo(-1);
        isPowerOfTwo(-2);
        isPowerOfTwo(-3);
        isPowerOfTwo(-4);
        isPowerOfTwo(4);
        isPowerOfTwo(16);
        isPowerOfTwo(25);
        isPowerOfTwo(48);
        isPowerOfTwo(12);
        isPowerOfTwo(24);
        isPowerOfTwo(64);
    }
}



