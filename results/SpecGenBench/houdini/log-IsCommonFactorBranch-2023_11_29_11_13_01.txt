public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:82:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:94:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:81:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:93:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:80:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:92:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:79:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:91:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:7: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:78:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:90:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:77:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:89:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:76:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:88:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:10: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:75:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:87:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:74:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:86:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:73:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:85:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:72:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:84:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:71:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:83:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:70:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:82:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:16: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:69:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:81:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:17: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:68:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:80:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:17: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:67:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:79:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:17: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:66:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:78:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19: verify: Precondition conjunct is false: b != 0
    //@ requires b != 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:65:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:77:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:64:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:76:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:63:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:75:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:62:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:74:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor < b;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:61:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:73:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:23: verify: Precondition conjunct is false: factor < b
    //@ requires factor < b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor <= b;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:60:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:72:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:23: verify: Precondition conjunct is false: factor <= b
    //@ requires factor <= b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor == b;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:59:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:71:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:23: verify: Precondition conjunct is false: factor == b
    //@ requires factor == b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor < a;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:58:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:70:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Precondition conjunct is false: factor < a
    //@ requires factor < a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor <= a;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:57:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:69:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Precondition conjunct is false: factor <= a
    //@ requires factor <= a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor == a;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:56:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:68:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Precondition conjunct is false: factor == a
    //@ requires factor == a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor < 1;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:55:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:67:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29: verify: Precondition conjunct is false: factor < 1
    //@ requires factor < 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor != 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:54:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:66:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31: verify: Precondition conjunct is false: factor != 1
    //@ requires factor != 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor > 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:65:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: Precondition conjunct is false: factor > 1
    //@ requires factor > 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor < 0;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:64:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: Precondition conjunct is false: factor < 0
    //@ requires factor < 0;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor <= 0;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:63:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: Precondition conjunct is false: factor <= 0
    //@ requires factor <= 0;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor == 0;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:50:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:62:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: Precondition conjunct is false: factor == 0
    //@ requires factor == 0;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor < -1;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:49:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:61:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35: verify: Precondition conjunct is false: factor < -1
    //@ requires factor < -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor <= -1;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:48:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:60:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35: verify: Precondition conjunct is false: factor <= -1
    //@ requires factor <= -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor == -1;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:47:) in method main
        isCommonFactor(-4, 0, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:59:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35: verify: Precondition conjunct is false: factor == -1
    //@ requires factor == -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39:) in method isCommonFactor
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53:
    //@ ensures !\result;
        ^
2 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures b >= 0 ==> !\result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42:) in method isCommonFactor
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52:
    //@ ensures b >= 0 ==> !\result;
        ^
2 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    //@ ensures factor >= 0 ==> !\result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43:) in method isCommonFactor
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51:
    //@ ensures factor >= 0 ==> !\result;
        ^
2 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:56:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:55:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:41:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:54:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:53:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:52:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:38:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:51:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:37:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:50:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:36:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:49:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Precondition conjunct is false: b >= 0
    //@ requires b >= 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:48:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Precondition conjunct is false: b >= -1
    //@ requires b >= -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:34:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:47:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Precondition conjunct is false: b > -1
    //@ requires b > -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures a >= 0 ==> !\result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30:) in method isCommonFactor
        return true;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40:
    //@ ensures a >= 0 ==> !\result;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:33:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:46:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19: verify: Precondition conjunct is false: factor <= 1
    //@ requires factor <= 1;
                        ^
5 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor <= 1;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:45:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19: verify: Precondition conjunct is false: factor <= 1
    //@ requires factor <= 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor == 1;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31:) in method main
        isCommonFactor(0, -4, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:44:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19: verify: Precondition conjunct is false: factor == 1
    //@ requires factor == 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures \result;
    //@ ensures a >= 0 ==> \result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:) in method isCommonFactor
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32:
    //@ ensures \result;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:44:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
5 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures a >= 0 ==> \result;
    //@ ensures b >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:) in method isCommonFactor
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31:
    //@ ensures b >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:43:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
5 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures a >= 0 ==> \result;
    //@ ensures factor >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:) in method isCommonFactor
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30:
    //@ ensures factor >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:42:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
5 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    //@ ensures a >= 0 ==> \result;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:) in method isCommonFactor
            return false;
            ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32:
    //@ ensures a >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:41:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
5 verification failures

public class IsCommonFactorBranch {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:40:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:25:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:39:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:24:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:38:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:3: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor >= b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:23:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:37:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: factor >= b
    //@ requires factor >= b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor > b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:22:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:36:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Precondition conjunct is false: factor > b
    //@ requires factor > b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor >= a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:21:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:35:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Precondition conjunct is false: factor >= a
    //@ requires factor >= a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor > a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:34:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Precondition conjunct is false: factor > a
    //@ requires factor > a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor >= 1;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:33:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Precondition conjunct is false: factor >= 1
    //@ requires factor >= 1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:18:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:32:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Precondition conjunct is false: factor >= 0
    //@ requires factor >= 0;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor > 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:17:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:31:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Precondition conjunct is false: factor > 0
    //@ requires factor > 0;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor != -1;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:16:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:30:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Precondition conjunct is false: factor != -1
    //@ requires factor != -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    //@ requires factor > -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:15:) in method main
        isCommonFactor(4, 0, -1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:14: verify: Precondition conjunct is false: factor > -1
    //@ requires factor > -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:14:) in method main
        isCommonFactor(0, 4, 4);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13:) in method main
        isCommonFactor(0, 4, 4);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12:) in method main
        isCommonFactor(0, 4, 4);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires factor != b;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11:) in method main
        isCommonFactor(0, 4, 4);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:7: verify: Precondition conjunct is false: factor != b
    //@ requires factor != b;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:10:) in method main
        isCommonFactor(-4, -4, -2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires factor != a;
    //@ requires factor != 0;
    //@ requires factor >= -1;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:9:) in method main
        isCommonFactor(-4, -4, -2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:25:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Precondition conjunct is false: factor >= -1
    //@ requires factor >= -1;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires factor != a;
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8:) in method main
        isCommonFactor(1, -1, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:29:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires factor != a;
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:7:) in method main
        isCommonFactor(1, -1, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:28:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires factor != a;
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6:) in method main
        isCommonFactor(1, -1, 1);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4: verify: Precondition conjunct is false: factor != a
    //@ requires factor != a;
                        ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5:) in method main
        isCommonFactor(-1, 1, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:27:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires b != 1;
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}

/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4:) in method main
        isCommonFactor(-1, 1, 2);
                      ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:26:
    public static boolean isCommonFactor (int a, int b, int factor) {
                          ^
/home/max/Documents/JMLGPT/tmp/IsCommonFactorBranch.java:2: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
3 verification failures

public class IsCommonFactorBranch {
    //@ requires factor != 0;
    public static boolean isCommonFactor (int a, int b, int factor) {
        if (a % factor != 0) {
            return false;
        }
        if (b % factor != 0) {
            return false;
        }
        return true;
    }

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isCommonFactor(-4, 0, 1);
        isCommonFactor(0, -4, 2);
        isCommonFactor(4, 0, -1);
        isCommonFactor(0, 4, 4);
        isCommonFactor(-4, -4, -2);
        isCommonFactor(4, 4, 3);
        isCommonFactor(0, 0, 1);
        isCommonFactor(-4, 4, 2);
        isCommonFactor(4, -4, 1);
        isCommonFactor(1, -1, 1);
        isCommonFactor(-1, 1, 2);
    }
}


