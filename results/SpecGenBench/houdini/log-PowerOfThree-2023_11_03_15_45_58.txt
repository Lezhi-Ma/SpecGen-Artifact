class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:56: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:56:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:4: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:55: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:55:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:5: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:54: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:54:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:5: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:53: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:53:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:5: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:52: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:52:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:7: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:51: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:51:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:50: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:50:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:49: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:17:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:49:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:48: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:16:) in method main
        isPowerOfThree(0);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:48:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp < 1;
    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:43:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp < 1
    //@ requires temp < 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp != 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:42:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:27: verify: Precondition conjunct is false: temp != 1
    //@ requires temp != 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp >= 1;
    //@ requires temp > 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:41:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28: verify: Precondition conjunct is false: temp > 1
    //@ requires temp > 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp >= 1;
    //@ requires temp < 0;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:40:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28: verify: Precondition conjunct is false: temp < 0
    //@ requires temp < 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp <= 1;
    //@ requires temp == 1;
    //@ requires temp >= 1;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:39:) in method isPowerOfThree
            __Loop_Invariant_Dummy1(temp);
                                   ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp <= 1
    //@ requires temp <= 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp == 1;
    //@ requires temp >= 1;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:38:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp == 1
    //@ requires temp == 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp >= 1;
    //@ requires temp <= 0;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:37:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26: verify: Precondition conjunct is false: temp <= 0
    //@ requires temp <= 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp >= 1;
    //@ requires temp == 0;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:36:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26: verify: Precondition conjunct is false: temp == 0
    //@ requires temp == 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp >= 1;
    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:35:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp >= 1
    //@ requires temp >= 1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp < -1;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:34:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28: verify: Precondition conjunct is false: temp < -1
    //@ requires temp < -1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != 0;
    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:33:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp != 0
    //@ requires temp != 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp >= 0;
    //@ requires temp > 0;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:32:) in method isPowerOfThree
            __Loop_Invariant_Dummy1(temp);
                                   ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:18:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp >= 0
    //@ requires temp >= 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp > 0;
    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:31:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp > 0
    //@ requires temp > 0;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp <= -1;
    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:30:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp <= -1
    //@ requires temp <= -1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp == -1;
    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:29:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp == -1
    //@ requires temp == -1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != -1;
    //@ requires temp >= -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26: verify: Precondition conjunct is false: temp >= -1
    //@ requires temp >= -1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:12:) in method isPowerOfThree
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22:
    //@ ensures !\result;
        ^
2 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != -1;
    //@ requires temp > -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: Precondition conjunct is false: temp > -1
    //@ requires temp > -1;
                      ^
3 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures n >= 0 ==> \result;
    //@ ensures n >= 0 ==> !\result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13:) in method isPowerOfThree
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    //@ ensures n >= 0 ==> !\result;
        ^
2 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures n >= 0 ==> \result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    //@ requires temp != -1;
    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24:) in method isPowerOfThree
        __Loop_Invariant_Dummy1(temp);
                               ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19:
    public static void __Loop_Invariant_Dummy1(int temp) {}
                       ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23: verify: Precondition conjunct is false: temp != -1
    //@ requires temp != -1;
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:29:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
6 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result;
    //@ ensures n >= 0 ==> \result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11:) in method isPowerOfThree
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:20:
    //@ ensures \result;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:28:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
5 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures n >= 0 ==> \result;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11:) in method isPowerOfThree
        return temp == 1;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:19:
    //@ ensures n >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:12:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:27:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
5 verification failures

class PowerOfThree {
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:26:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:10:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:25:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n <= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:9:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:24:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n <= 1;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8:) in method main
        isPowerOfThree(1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n <= 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:7:) in method main
        isPowerOfThree(2);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:6:) in method main
        isPowerOfThree(-1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:23:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n >= 0
    //@ requires n >= 0;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:5:) in method main
        isPowerOfThree(-1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:22:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n != -1
    //@ requires n != -1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n >= -1;
    //@ requires n > -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:4:) in method main
        isPowerOfThree(-1);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Precondition conjunct is false: n > -1
    //@ requires n > -1;
                   ^
3 verification failures

class PowerOfThree {
    //@ requires n >= -1;
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}


/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3:) in method main
        isPowerOfThree(-2);
                      ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/PowerOfThree.java:21:
    public static boolean isPowerOfThree(int n) {
                          ^
/home/max/Documents/JMLGPT/tmp/PowerOfThree.java:2: verify: Precondition conjunct is false: n >= -1
    //@ requires n >= -1;
                   ^
3 verification failures

class PowerOfThree {
    public static boolean isPowerOfThree(int n) {
        int temp = n;
        while (temp != 0 && temp % 3 == 0) {
            __Loop_Invariant_Dummy1(temp);
            temp /= 3;
        }
        __Loop_Invariant_Dummy1(temp);
        return temp == 1;
    }

    public static void __Loop_Invariant_Dummy1(int temp) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        isPowerOfThree(0);
        isPowerOfThree(1);
        isPowerOfThree(2);
        isPowerOfThree(-1);
        isPowerOfThree(-2);
        isPowerOfThree(3);
        isPowerOfThree(9);
        isPowerOfThree(27);
        isPowerOfThree(81);
        isPowerOfThree(45);
    }
}



