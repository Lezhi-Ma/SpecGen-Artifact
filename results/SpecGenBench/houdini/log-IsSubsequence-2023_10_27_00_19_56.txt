class IsSubsequence {
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ non_null
    //@ non_null
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ non_null
    //@ non_null
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: error: Embedded block comment must terminate within the JML line comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: error: illegal start of type
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:5: error: ';' expected
    //@ ensures \result;
               ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:5: error: Token \result is not a type
    //@ ensures \result;
                ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:106: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:106: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:117: error: reached end of file while parsing
9 errors

class IsSubsequence {
    //@ non_null
    //@ non_null
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ non_null
    //@ non_null
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:105: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:105: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:116: error: reached end of file while parsing
5 errors

class IsSubsequence {
    //@ non_null
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ non_null
    //@ non_null
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:104: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:104: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:115: error: reached end of file while parsing
5 errors

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ non_null
    //@ non_null
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:27: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:103: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:103: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:114: error: reached end of file while parsing
4 errors

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ non_null
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:27: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:102: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:102: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:113: error: reached end of file while parsing
4 errors

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:101: error: illegal start of type
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:101: error: unclosed comment
    //@ */ throws java.lang.StringIndexOutOfBoundsException /* Houdini inferred exceptions
                                                            ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:112: error: reached end of file while parsing
3 errors

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:99:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:98:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:18:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ ensures \result;
    //@ ensures !\result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24:
    //@ ensures !\result;
        ^
2 verification failures

class IsSubsequence {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:96:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:17:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:26: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ ensures \result;
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:23:
    //@ ensures \result;
        ^
2 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:94:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:16:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:27: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures s != null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:6:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:22:
    //@ ensures s != null ==> !\result;
        ^
2 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    //@ ensures t != null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:9:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:21:
    //@ ensures t != null ==> !\result;
        ^
2 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures s != null ==> \result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:5:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:20:
    //@ ensures s != null ==> \result;
        ^
2 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:90:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:13:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    //@ ensures t != null ==> \result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:7:) in method isSubsequence
        return i == n;
        ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:19:
    //@ ensures t != null ==> \result;
        ^
2 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:88:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:25: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:87:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:26: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:86:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:22: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:85:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:21: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:84:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:83:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:82:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:24: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:81:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:80:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:79:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:78:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:21: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:77:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:76:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:75:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:74:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:73:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:72:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:21: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:71:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:70:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:25: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:69:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:35: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:68:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:67:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:27: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:66:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:26: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:65:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:26: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i >= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:64:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:63:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:62:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:25: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i > n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:61:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:60:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:59:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:33: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j > i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:58:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:33: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:57:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:35: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:56:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:25: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:55:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:25: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:54:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:53:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:52:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:36: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:51:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:37: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:50:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:37: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:49:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= i;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:48:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:47:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != i;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:46:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j != 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:45:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:44:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:43:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:42:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:41:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:40:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j > -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:39:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 1;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:38:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j == n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:37:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:33: verify: Precondition conjunct is false: j == n
    //@ requires j == n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    //@ requires j >= n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:36:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: j >= n
    //@ requires j >= n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    //@ requires j > n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:35:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Precondition conjunct is false: j > n
    //@ requires j > n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j <= -1;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != 1;
    //@ requires j <= 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:33:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= 0;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j < n;
    //@ requires j <= n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j < n
    //@ requires j < n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j <= n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j <= n
    //@ requires j <= n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires j != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29:) in method isSubsequence
            __Loop_Invariant_Dummy1(s, t, n, i, j);
                                   ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:12:
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:28: verify: Precondition conjunct is false: j != n
    //@ requires j != n;
                   ^
3 verification failures

class IsSubsequence {
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:13: verify: The prover cannot establish an assertion (ExceptionalPostcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2:) in method isSubsequence
            if (s.charAt(i) == t.charAt(j)) {
                                       ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:2: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:13:
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
        ^
2 verification failures

class IsSubsequence {
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}


/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32: verify: The prover cannot establish an assertion (ExceptionalPostcondition: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29:) in method __HoudiniInvoker
        isSubsequence("a", "abc");
                     ^
/home/max/Documents/JMLGPT/tmp/IsSubsequence.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IsSubsequence.java:32:
    //@ exsures (java.lang.StringIndexOutOfBoundsException ex) (false);
        ^
2 verification failures

class IsSubsequence {
    //@ ensures s == null ==> \result;
    //@ ensures s == null ==> !\result;
    //@ ensures t == null ==> \result;
    //@ ensures t == null ==> !\result;
    public static boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;

        while (i < n && j < m) {
            __Loop_Invariant_Dummy1(s, t, n, i, j);
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }

    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy1(String s, String t, int n, int i, int j) {}

    public static void __HoudiniInvoker() {
        isSubsequence("abcde", "abcdefg");
        isSubsequence("a", "abc");
        isSubsequence("", "");
        isSubsequence("a", "");
        isSubsequence("", "ab");
    }
}



