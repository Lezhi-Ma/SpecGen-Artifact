public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year == 1;
    //@ requires year != 1;
    //@ requires year >= 1;
    //@ requires year > 1;
    //@ requires year < 0;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year != 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:25:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:31:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:5: verify: Precondition conjunct is false: year == 1
    //@ requires year == 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year >= 1;
    //@ requires year > 1;
    //@ requires year < 0;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year != 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:24:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:30:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:6: verify: Precondition conjunct is false: year >= 1
    //@ requires year >= 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year > 1;
    //@ requires year < 0;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year != 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:23:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:29:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:6: verify: Precondition conjunct is false: year > 1
    //@ requires year > 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year < 0;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year != 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:22:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:28:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:6: verify: Precondition conjunct is false: year < 0
    //@ requires year < 0;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year != 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:21:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:27:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8: verify: Precondition conjunct is false: year != 0
    //@ requires year != 0;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year > 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:20:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:26:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9: verify: Precondition conjunct is false: year > 0
    //@ requires year > 0;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year < -1;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:19:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:25:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9: verify: Precondition conjunct is false: year < -1
    //@ requires year < -1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year <= -1;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:24:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9: verify: Precondition conjunct is false: year <= -1
    //@ requires year <= -1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year == -1;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17:) in method main
       isLeapYear(0);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:23:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9: verify: Precondition conjunct is false: year == -1
    //@ requires year == -1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures !\result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:13:) in method isLeapYear
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17:
    //@ ensures !\result;
        ^
2 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    //@ ensures year >= 0 ==> !\result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:14:) in method isLeapYear
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:16:
    //@ ensures year >= 0 ==> !\result;
        ^
2 verification failures

public class LeapYearSeq {
    
    //@ requires year < 1;
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:21: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:14:) in method main
       isLeapYear(1);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:21:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:3: verify: Precondition conjunct is false: year < 1
    //@ requires year < 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year != 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:13:) in method main
       isLeapYear(1);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:20:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:4: verify: Precondition conjunct is false: year != 1
    //@ requires year != 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year <= 0;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:12:) in method main
       isLeapYear(1);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:19:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:4: verify: Precondition conjunct is false: year <= 0
    //@ requires year <= 0;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year == 0;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:11:) in method main
       isLeapYear(1);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:4: verify: Precondition conjunct is false: year == 0
    //@ requires year == 0;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures \result;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:11: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8:) in method isLeapYear
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:11:
    //@ ensures \result;
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:10:) in method main
       isLeapYear(2);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:18:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:3: verify: Precondition conjunct is false: year <= 1
    //@ requires year <= 1;
                      ^
5 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    //@ ensures year >= 0 ==> \result;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:10: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8:) in method isLeapYear
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:10:
    //@ ensures year >= 0 ==> \result;
        ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9:) in method main
       isLeapYear(2);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:17:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:3: verify: Precondition conjunct is false: year <= 1
    //@ requires year <= 1;
                      ^
5 verification failures

public class LeapYearSeq {
    
    //@ requires year <= 1;
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}


/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8:) in method main
       isLeapYear(2);
                 ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:16:
    public static boolean isLeapYear(int year) {
                          ^
/home/max/Documents/JMLGPT/tmp/LeapYearSeq.java:3: verify: Precondition conjunct is false: year <= 1
    //@ requires year <= 1;
                      ^
3 verification failures

public class LeapYearSeq {
    
    //@ requires year >= 0;
    //@ requires year != -1;
    //@ requires year >= -1;
    //@ requires year > -1;
    public static boolean isLeapYear(int year) {
        return ((year % 4 == 0) ? ((year % 100 == 0) ? ((year % 400 == 0) ? true : false) : true) : false);
   }
   
   //@ requires \nonnullelements(args);
   public static void main(String[] args) {
       isLeapYear(0);
       isLeapYear(1);
       isLeapYear(2);
       isLeapYear(2000);
       isLeapYear(2004);
       isLeapYear(2008);
       isLeapYear(2001);
       isLeapYear(2010);
       isLeapYear(2011);
   }
}



