public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:46:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:244:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:5: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:45:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:243:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:6: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:44:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:242:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:6: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:43:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:241:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:8: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:42:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:240:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:41:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:239:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:40:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:238:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:39:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:237:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: Precondition conjunct is false: x != -1
    //@ requires x != -1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:38:) in method main
        squareOf(-1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:236:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:12: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:12:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:48:
    //@ ensures \result < x;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:12:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:47:
    //@ ensures \result <= x;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:12:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:46:
    //@ ensures \result == x;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:15:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:45:
    //@ ensures \result < 1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:15:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:44:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:15:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:43:
    //@ ensures \result == 1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:18:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:42:
    //@ ensures \result < 0;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:18:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:41:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:18:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:40:
    //@ ensures \result == 0;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:21:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:39:
    //@ ensures \result < -1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:21:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:38:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:21:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:37:
    //@ ensures \result == -1;
        ^
2 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:25:) in method main
        squareOf(-3);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:224:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:15:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:36:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ requires x >= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:24:) in method main
        squareOf(-3);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:223:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:14:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:35:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:23:) in method main
        squareOf(0);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:223:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:6: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:34: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:13:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:34:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x != 0;
    //@ requires x <= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:22:) in method main
        squareOf(0);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:222:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:7: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:33: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:12:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:33:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ requires x <= -1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:21:) in method main
        squareOf(0);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:221:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:7: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:32:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:20:) in method main
        squareOf(1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:221:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:31: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:10:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:31:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x <= 1;
    //@ requires x != 1;
    //@ requires x <= 0;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:19:) in method main
        squareOf(1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:220:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:4: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:30:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x <= 1;
    //@ requires x <= 0;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:18:) in method main
        squareOf(1);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:219:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:4: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:8:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:29:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ requires x <= 1;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:17:) in method main
        squareOf(2);
                ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:219:
    public static int squareOf(int x) {
                      ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:7:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:28:
    //@ ensures \result != 1;
        ^
5 verification failures

public class IntSquare {

    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:27: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:6:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:27:
    //@ ensures \result != 1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:7:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:26:
    //@ ensures \result > 1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:25:
    //@ ensures \result != x;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:24:
    //@ ensures \result >= x;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result > x;
    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:23:
    //@ ensures \result > x;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result >= 1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:22:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:21:
    //@ ensures \result != 0;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:20:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result > 0;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:19:
    //@ ensures \result > 0;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:18:
    //@ ensures \result != -1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:17:
    //@ ensures \result >= -1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures \result > -1;
    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:16: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:16:
    //@ ensures \result > -1;
        ^
2 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:90:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:89:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:88:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:87:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:86:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:85:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:84:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:83:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:19: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:82:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:22: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:81:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:22: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:80:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:22: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:79:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:78:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:77:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:76:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:75:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:74:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:73:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:72:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:71:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:70:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:69:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:68:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:67:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:66:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:65:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:64:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:63:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:62:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:61:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:60:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:59:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:58:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:57:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:56:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:55:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:27: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:54:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:53:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:52:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:51:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:50:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:49:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:48:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:47:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:46:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:45:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:44:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:43:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:42:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:41:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:40:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:39:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:38:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:37:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:36:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:35:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:34:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:33:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:32:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:31:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= -1;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:30:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > -1;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:29:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:9:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:28: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:137:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:136:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:135:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:134:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:29: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:133:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:132:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:131:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:130:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:30: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:129:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:33: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:128:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:33: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:127:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:33: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:126:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:125:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:124:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:123:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:122:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:121:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:120:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:119:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:118:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:117:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:116:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:115:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:114:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:113:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:112:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:111:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:110:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:109:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:108:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:107:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:106:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:105:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:104:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires res > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:103:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:102:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:38: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:101:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:100:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:99:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:98:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:97:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:96:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:95:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:94:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:93:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:92:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:91:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:90:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:89:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:88:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:87:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:86:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:85:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:84:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:83:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:82:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:81:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:80:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:79:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:78:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:77:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > -1;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:76:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:39: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j == x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:75:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:41: verify: Precondition conjunct is false: j == x
    //@ requires j == x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:74:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= x
    //@ requires j >= x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:73:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > x
    //@ requires j > x;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < i;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:72:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j < i
    //@ requires j < i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= i;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:71:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j <= i
    //@ requires j <= i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == i;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:70:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j == i
    //@ requires j == i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != i;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:69:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j != i
    //@ requires j != i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= i;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:68:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= i
    //@ requires j >= i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > i;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:67:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > i
    //@ requires j > i;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < res;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:66:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j < res
    //@ requires j < res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= res;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:65:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j <= res
    //@ requires j <= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == res;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:64:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j == res
    //@ requires j == res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != res;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:63:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j != res
    //@ requires j != res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= res;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:62:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= res
    //@ requires j >= res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > res;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:61:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > res
    //@ requires j > res;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 1;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:60:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j < 1
    //@ requires j < 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 1;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:59:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j <= 1
    //@ requires j <= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == 1;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:58:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j == 1
    //@ requires j == 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != 1;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:57:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j != 1
    //@ requires j != 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= 1;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:56:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= 1
    //@ requires j >= 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > 1;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:55:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > 1
    //@ requires j > 1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < 0;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:54:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j < 0
    //@ requires j < 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= 0;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:53:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j <= 0
    //@ requires j <= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == 0;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:52:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j == 0
    //@ requires j == 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != 0;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:51:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j != 0
    //@ requires j != 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= 0;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:50:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= 0
    //@ requires j >= 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > 0;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:49:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > 0
    //@ requires j > 0;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j < -1;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:48:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j < -1
    //@ requires j < -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j <= -1;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:47:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j <= -1
    //@ requires j <= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j == -1;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:46:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j == -1
    //@ requires j == -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j != -1;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:45:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j != -1
    //@ requires j != -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j >= -1;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:44:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j >= -1
    //@ requires j >= -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    //@ requires j > -1;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:43:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:11:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:42: verify: Precondition conjunct is false: j > -1
    //@ requires j > -1;
                   ^
3 verification failures

public class IntSquare {

    //@ ensures x >= 0 ==> \result >= 0;
    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:15: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:3:) in method squareOf
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:15:
    //@ ensures x >= 0 ==> \result >= 0;
        ^
2 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:27:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:8:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:17: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:26:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:8:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:17: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:25:) in method squareOf
            __Loop_Invariant_Dummy1(x, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:8:
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:18: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:38:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:10:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:37:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:10:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:25: verify: Precondition conjunct is false: x != 0
    //@ requires x != 0;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}

/home/max/Documents/JMLGPT/tmp/IntSquare.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/IntSquare.java:36:) in method squareOf
                __Loop_Invariant_Dummy2(x, res, i, j);
                                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/IntSquare.java:10:
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
                       ^
/home/max/Documents/JMLGPT/tmp/IntSquare.java:26: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

public class IntSquare {

    public static int squareOf(int x) {
        if(x < 0)
            x = -x;
        int res = 0;
        for(int i = 0; i < x; i++) {
            __Loop_Invariant_Dummy1(x, res, i);
            for(int j = 0; j < x; j++) {
                __Loop_Invariant_Dummy2(x, res, i, j);
                res = res + 1;
            }
        }
        return res;
    }

    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    public static void __Loop_Invariant_Dummy1(int x, int res, int i) {}
    //@ requires x >= 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires j < x;
    //@ requires j <= x;
    //@ requires j != x;
    public static void __Loop_Invariant_Dummy2(int x, int res, int i, int j) {}
    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        squareOf(-1);
        squareOf(-3);
        squareOf(0);
        squareOf(1);
        squareOf(2);
        squareOf(3);
    }
}


