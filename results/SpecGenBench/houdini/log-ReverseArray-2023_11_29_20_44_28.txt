public class ReverseArray {
    //@ non_null
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ ensures \result != null;
    //@ ensures original.length < \result.length;
    //@ ensures original.length <= \result.length;
    //@ ensures original.length == \result.length;
    //@ ensures original.length != \result.length;
    //@ ensures original.length >= \result.length;
    //@ ensures original.length > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures original == null ==> \result != null;
    //@ ensures original != null ==> \result != null;
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        for(int i = 0; i < n ; i++) {
            __Loop_Invariant_Dummy1(original, n, res, i);
            res[i] = original[n - i - 1];
        }
        return res;
    }

    //@ non_null
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ requires n < original.length;
    //@ requires n <= original.length;
    //@ requires n == original.length;
    //@ requires n != original.length;
    //@ requires n >= original.length;
    //@ requires n > original.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires n < res.length;
    //@ requires n <= res.length;
    //@ requires n == res.length;
    //@ requires n != res.length;
    //@ requires n >= res.length;
    //@ requires n > res.length;
    //@ requires original.length < res.length;
    //@ requires original.length <= res.length;
    //@ requires original.length == res.length;
    //@ requires original.length != res.length;
    //@ requires original.length >= res.length;
    //@ requires original.length > res.length;
    //@ requires -1 < res.length;
    //@ requires -1 <= res.length;
    //@ requires -1 == res.length;
    //@ requires -1 != res.length;
    //@ requires -1 >= res.length;
    //@ requires -1 > res.length;
    //@ requires 7 < res.length;
    //@ requires 7 <= res.length;
    //@ requires 7 == res.length;
    //@ requires 7 != res.length;
    //@ requires 7 >= res.length;
    //@ requires 7 > res.length;
    //@ requires 5 < res.length;
    //@ requires 5 <= res.length;
    //@ requires 5 == res.length;
    //@ requires 5 != res.length;
    //@ requires 5 >= res.length;
    //@ requires 5 > res.length;
    //@ requires 4 < res.length;
    //@ requires 4 <= res.length;
    //@ requires 4 == res.length;
    //@ requires 4 != res.length;
    //@ requires 4 >= res.length;
    //@ requires 4 > res.length;
    //@ requires 3 < res.length;
    //@ requires 3 <= res.length;
    //@ requires 3 == res.length;
    //@ requires 3 != res.length;
    //@ requires 3 >= res.length;
    //@ requires 3 > res.length;
    //@ requires 2 < res.length;
    //@ requires 2 <= res.length;
    //@ requires 2 == res.length;
    //@ requires 2 != res.length;
    //@ requires 2 >= res.length;
    //@ requires 2 > res.length;
    //@ requires 1 < res.length;
    //@ requires 1 <= res.length;
    //@ requires 1 == res.length;
    //@ requires 1 != res.length;
    //@ requires 1 >= res.length;
    //@ requires 1 > res.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < original.length;
    //@ requires i <= original.length;
    //@ requires i == original.length;
    //@ requires i != original.length;
    //@ requires i >= original.length;
    //@ requires i > original.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < res.length;
    //@ requires i <= res.length;
    //@ requires i == res.length;
    //@ requires i != res.length;
    //@ requires i >= res.length;
    //@ requires i > res.length;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] original, int n, int[] res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        reverse(arr);
        arr = new int[]{1};
        reverse(arr);
        arr = new int[]{1, -2};
        reverse(arr);
        arr = new int[]{1, 1};
        reverse(arr);
        arr = new int[]{1, 2, -7};
        reverse(arr);
        arr = new int[]{1, 1, 2};
        reverse(arr);
        arr = new int[]{7, 1, 3};
        reverse(arr);
        arr = new int[]{-8, 1, 0, 1};
        reverse(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        reverse(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        reverse(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        reverse(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        reverse(arr);
    }
}


/home/max/Documents/JMLGPT/tmp/ReverseArray.java:2: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:107: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:204: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
3 errors

public class ReverseArray {
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ ensures \result != null;
    //@ ensures original.length < \result.length;
    //@ ensures original.length <= \result.length;
    //@ ensures original.length == \result.length;
    //@ ensures original.length != \result.length;
    //@ ensures original.length >= \result.length;
    //@ ensures original.length > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures original == null ==> \result != null;
    //@ ensures original != null ==> \result != null;
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        for(int i = 0; i < n ; i++) {
            __Loop_Invariant_Dummy1(original, n, res, i);
            res[i] = original[n - i - 1];
        }
        return res;
    }

    //@ non_null
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ requires n < original.length;
    //@ requires n <= original.length;
    //@ requires n == original.length;
    //@ requires n != original.length;
    //@ requires n >= original.length;
    //@ requires n > original.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires n < res.length;
    //@ requires n <= res.length;
    //@ requires n == res.length;
    //@ requires n != res.length;
    //@ requires n >= res.length;
    //@ requires n > res.length;
    //@ requires original.length < res.length;
    //@ requires original.length <= res.length;
    //@ requires original.length == res.length;
    //@ requires original.length != res.length;
    //@ requires original.length >= res.length;
    //@ requires original.length > res.length;
    //@ requires -1 < res.length;
    //@ requires -1 <= res.length;
    //@ requires -1 == res.length;
    //@ requires -1 != res.length;
    //@ requires -1 >= res.length;
    //@ requires -1 > res.length;
    //@ requires 7 < res.length;
    //@ requires 7 <= res.length;
    //@ requires 7 == res.length;
    //@ requires 7 != res.length;
    //@ requires 7 >= res.length;
    //@ requires 7 > res.length;
    //@ requires 5 < res.length;
    //@ requires 5 <= res.length;
    //@ requires 5 == res.length;
    //@ requires 5 != res.length;
    //@ requires 5 >= res.length;
    //@ requires 5 > res.length;
    //@ requires 4 < res.length;
    //@ requires 4 <= res.length;
    //@ requires 4 == res.length;
    //@ requires 4 != res.length;
    //@ requires 4 >= res.length;
    //@ requires 4 > res.length;
    //@ requires 3 < res.length;
    //@ requires 3 <= res.length;
    //@ requires 3 == res.length;
    //@ requires 3 != res.length;
    //@ requires 3 >= res.length;
    //@ requires 3 > res.length;
    //@ requires 2 < res.length;
    //@ requires 2 <= res.length;
    //@ requires 2 == res.length;
    //@ requires 2 != res.length;
    //@ requires 2 >= res.length;
    //@ requires 2 > res.length;
    //@ requires 1 < res.length;
    //@ requires 1 <= res.length;
    //@ requires 1 == res.length;
    //@ requires 1 != res.length;
    //@ requires 1 >= res.length;
    //@ requires 1 > res.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < original.length;
    //@ requires i <= original.length;
    //@ requires i == original.length;
    //@ requires i != original.length;
    //@ requires i >= original.length;
    //@ requires i > original.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < res.length;
    //@ requires i <= res.length;
    //@ requires i == res.length;
    //@ requires i != res.length;
    //@ requires i >= res.length;
    //@ requires i > res.length;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] original, int n, int[] res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        reverse(arr);
        arr = new int[]{1};
        reverse(arr);
        arr = new int[]{1, -2};
        reverse(arr);
        arr = new int[]{1, 1};
        reverse(arr);
        arr = new int[]{1, 2, -7};
        reverse(arr);
        arr = new int[]{1, 1, 2};
        reverse(arr);
        arr = new int[]{7, 1, 3};
        reverse(arr);
        arr = new int[]{-8, 1, 0, 1};
        reverse(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        reverse(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        reverse(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        reverse(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        reverse(arr);
    }
}


/home/max/Documents/JMLGPT/tmp/ReverseArray.java:106: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
/home/max/Documents/JMLGPT/tmp/ReverseArray.java:203: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
2 errors

public class ReverseArray {
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ ensures \result != null;
    //@ ensures original.length < \result.length;
    //@ ensures original.length <= \result.length;
    //@ ensures original.length == \result.length;
    //@ ensures original.length != \result.length;
    //@ ensures original.length >= \result.length;
    //@ ensures original.length > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures original == null ==> \result != null;
    //@ ensures original != null ==> \result != null;
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        for(int i = 0; i < n ; i++) {
            __Loop_Invariant_Dummy1(original, n, res, i);
            res[i] = original[n - i - 1];
        }
        return res;
    }

    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ requires n < original.length;
    //@ requires n <= original.length;
    //@ requires n == original.length;
    //@ requires n != original.length;
    //@ requires n >= original.length;
    //@ requires n > original.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ non_null
    //@ requires n < res.length;
    //@ requires n <= res.length;
    //@ requires n == res.length;
    //@ requires n != res.length;
    //@ requires n >= res.length;
    //@ requires n > res.length;
    //@ requires original.length < res.length;
    //@ requires original.length <= res.length;
    //@ requires original.length == res.length;
    //@ requires original.length != res.length;
    //@ requires original.length >= res.length;
    //@ requires original.length > res.length;
    //@ requires -1 < res.length;
    //@ requires -1 <= res.length;
    //@ requires -1 == res.length;
    //@ requires -1 != res.length;
    //@ requires -1 >= res.length;
    //@ requires -1 > res.length;
    //@ requires 7 < res.length;
    //@ requires 7 <= res.length;
    //@ requires 7 == res.length;
    //@ requires 7 != res.length;
    //@ requires 7 >= res.length;
    //@ requires 7 > res.length;
    //@ requires 5 < res.length;
    //@ requires 5 <= res.length;
    //@ requires 5 == res.length;
    //@ requires 5 != res.length;
    //@ requires 5 >= res.length;
    //@ requires 5 > res.length;
    //@ requires 4 < res.length;
    //@ requires 4 <= res.length;
    //@ requires 4 == res.length;
    //@ requires 4 != res.length;
    //@ requires 4 >= res.length;
    //@ requires 4 > res.length;
    //@ requires 3 < res.length;
    //@ requires 3 <= res.length;
    //@ requires 3 == res.length;
    //@ requires 3 != res.length;
    //@ requires 3 >= res.length;
    //@ requires 3 > res.length;
    //@ requires 2 < res.length;
    //@ requires 2 <= res.length;
    //@ requires 2 == res.length;
    //@ requires 2 != res.length;
    //@ requires 2 >= res.length;
    //@ requires 2 > res.length;
    //@ requires 1 < res.length;
    //@ requires 1 <= res.length;
    //@ requires 1 == res.length;
    //@ requires 1 != res.length;
    //@ requires 1 >= res.length;
    //@ requires 1 > res.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < original.length;
    //@ requires i <= original.length;
    //@ requires i == original.length;
    //@ requires i != original.length;
    //@ requires i >= original.length;
    //@ requires i > original.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < res.length;
    //@ requires i <= res.length;
    //@ requires i == res.length;
    //@ requires i != res.length;
    //@ requires i >= res.length;
    //@ requires i > res.length;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] original, int n, int[] res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        reverse(arr);
        arr = new int[]{1};
        reverse(arr);
        arr = new int[]{1, -2};
        reverse(arr);
        arr = new int[]{1, 1};
        reverse(arr);
        arr = new int[]{1, 2, -7};
        reverse(arr);
        arr = new int[]{1, 1, 2};
        reverse(arr);
        arr = new int[]{7, 1, 3};
        reverse(arr);
        arr = new int[]{-8, 1, 0, 1};
        reverse(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        reverse(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        reverse(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        reverse(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        reverse(arr);
    }
}


/home/max/Documents/JMLGPT/tmp/ReverseArray.java:202: error: No modifiers are allowed prior to a lightweight specification case
    //@ non_null
        ^
1 error

public class ReverseArray {
    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ ensures \result != null;
    //@ ensures original.length < \result.length;
    //@ ensures original.length <= \result.length;
    //@ ensures original.length == \result.length;
    //@ ensures original.length != \result.length;
    //@ ensures original.length >= \result.length;
    //@ ensures original.length > \result.length;
    //@ ensures -1 < \result.length;
    //@ ensures -1 <= \result.length;
    //@ ensures -1 == \result.length;
    //@ ensures -1 != \result.length;
    //@ ensures -1 >= \result.length;
    //@ ensures -1 > \result.length;
    //@ ensures 7 < \result.length;
    //@ ensures 7 <= \result.length;
    //@ ensures 7 == \result.length;
    //@ ensures 7 != \result.length;
    //@ ensures 7 >= \result.length;
    //@ ensures 7 > \result.length;
    //@ ensures 5 < \result.length;
    //@ ensures 5 <= \result.length;
    //@ ensures 5 == \result.length;
    //@ ensures 5 != \result.length;
    //@ ensures 5 >= \result.length;
    //@ ensures 5 > \result.length;
    //@ ensures 4 < \result.length;
    //@ ensures 4 <= \result.length;
    //@ ensures 4 == \result.length;
    //@ ensures 4 != \result.length;
    //@ ensures 4 >= \result.length;
    //@ ensures 4 > \result.length;
    //@ ensures 3 < \result.length;
    //@ ensures 3 <= \result.length;
    //@ ensures 3 == \result.length;
    //@ ensures 3 != \result.length;
    //@ ensures 3 >= \result.length;
    //@ ensures 3 > \result.length;
    //@ ensures 2 < \result.length;
    //@ ensures 2 <= \result.length;
    //@ ensures 2 == \result.length;
    //@ ensures 2 != \result.length;
    //@ ensures 2 >= \result.length;
    //@ ensures 2 > \result.length;
    //@ ensures 1 < \result.length;
    //@ ensures 1 <= \result.length;
    //@ ensures 1 == \result.length;
    //@ ensures 1 != \result.length;
    //@ ensures 1 >= \result.length;
    //@ ensures 1 > \result.length;
    //@ ensures \fresh(\result);
    //@ ensures original == null ==> \result != null;
    //@ ensures original != null ==> \result != null;
    public static int[] reverse(int[] original) {
        int n = original.length;
        int[] res = new int[n];
        for(int i = 0; i < n ; i++) {
            __Loop_Invariant_Dummy1(original, n, res, i);
            res[i] = original[n - i - 1];
        }
        return res;
    }

    //@ requires 5 < original.length;
    //@ requires 5 <= original.length;
    //@ requires 5 == original.length;
    //@ requires 5 != original.length;
    //@ requires 5 >= original.length;
    //@ requires 5 > original.length;
    //@ requires 4 < original.length;
    //@ requires 4 <= original.length;
    //@ requires 4 == original.length;
    //@ requires 4 != original.length;
    //@ requires 4 >= original.length;
    //@ requires 4 > original.length;
    //@ requires 3 < original.length;
    //@ requires 3 <= original.length;
    //@ requires 3 == original.length;
    //@ requires 3 != original.length;
    //@ requires 3 >= original.length;
    //@ requires 3 > original.length;
    //@ requires 2 < original.length;
    //@ requires 2 <= original.length;
    //@ requires 2 == original.length;
    //@ requires 2 != original.length;
    //@ requires 2 >= original.length;
    //@ requires 2 > original.length;
    //@ requires 1 < original.length;
    //@ requires 1 <= original.length;
    //@ requires 1 == original.length;
    //@ requires 1 != original.length;
    //@ requires 1 >= original.length;
    //@ requires 1 > original.length;
    //@ requires -1 < original.length;
    //@ requires -1 <= original.length;
    //@ requires -1 == original.length;
    //@ requires -1 != original.length;
    //@ requires -1 >= original.length;
    //@ requires -1 > original.length;
    //@ requires 7 < original.length;
    //@ requires 7 <= original.length;
    //@ requires 7 == original.length;
    //@ requires 7 != original.length;
    //@ requires 7 >= original.length;
    //@ requires 7 > original.length;
    //@ requires n < original.length;
    //@ requires n <= original.length;
    //@ requires n == original.length;
    //@ requires n != original.length;
    //@ requires n >= original.length;
    //@ requires n > original.length;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires n < 7;
    //@ requires n <= 7;
    //@ requires n == 7;
    //@ requires n != 7;
    //@ requires n >= 7;
    //@ requires n > 7;
    //@ requires n < 5;
    //@ requires n <= 5;
    //@ requires n == 5;
    //@ requires n != 5;
    //@ requires n >= 5;
    //@ requires n > 5;
    //@ requires n < 4;
    //@ requires n <= 4;
    //@ requires n == 4;
    //@ requires n != 4;
    //@ requires n >= 4;
    //@ requires n > 4;
    //@ requires n < 3;
    //@ requires n <= 3;
    //@ requires n == 3;
    //@ requires n != 3;
    //@ requires n >= 3;
    //@ requires n > 3;
    //@ requires n < 2;
    //@ requires n <= 2;
    //@ requires n == 2;
    //@ requires n != 2;
    //@ requires n >= 2;
    //@ requires n > 2;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < res.length;
    //@ requires n <= res.length;
    //@ requires n == res.length;
    //@ requires n != res.length;
    //@ requires n >= res.length;
    //@ requires n > res.length;
    //@ requires original.length < res.length;
    //@ requires original.length <= res.length;
    //@ requires original.length == res.length;
    //@ requires original.length != res.length;
    //@ requires original.length >= res.length;
    //@ requires original.length > res.length;
    //@ requires -1 < res.length;
    //@ requires -1 <= res.length;
    //@ requires -1 == res.length;
    //@ requires -1 != res.length;
    //@ requires -1 >= res.length;
    //@ requires -1 > res.length;
    //@ requires 7 < res.length;
    //@ requires 7 <= res.length;
    //@ requires 7 == res.length;
    //@ requires 7 != res.length;
    //@ requires 7 >= res.length;
    //@ requires 7 > res.length;
    //@ requires 5 < res.length;
    //@ requires 5 <= res.length;
    //@ requires 5 == res.length;
    //@ requires 5 != res.length;
    //@ requires 5 >= res.length;
    //@ requires 5 > res.length;
    //@ requires 4 < res.length;
    //@ requires 4 <= res.length;
    //@ requires 4 == res.length;
    //@ requires 4 != res.length;
    //@ requires 4 >= res.length;
    //@ requires 4 > res.length;
    //@ requires 3 < res.length;
    //@ requires 3 <= res.length;
    //@ requires 3 == res.length;
    //@ requires 3 != res.length;
    //@ requires 3 >= res.length;
    //@ requires 3 > res.length;
    //@ requires 2 < res.length;
    //@ requires 2 <= res.length;
    //@ requires 2 == res.length;
    //@ requires 2 != res.length;
    //@ requires 2 >= res.length;
    //@ requires 2 > res.length;
    //@ requires 1 < res.length;
    //@ requires 1 <= res.length;
    //@ requires 1 == res.length;
    //@ requires 1 != res.length;
    //@ requires 1 >= res.length;
    //@ requires 1 > res.length;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires i < original.length;
    //@ requires i <= original.length;
    //@ requires i == original.length;
    //@ requires i != original.length;
    //@ requires i >= original.length;
    //@ requires i > original.length;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < 7;
    //@ requires i <= 7;
    //@ requires i == 7;
    //@ requires i != 7;
    //@ requires i >= 7;
    //@ requires i > 7;
    //@ requires i < res.length;
    //@ requires i <= res.length;
    //@ requires i == res.length;
    //@ requires i != res.length;
    //@ requires i >= res.length;
    //@ requires i > res.length;
    //@ requires i < 5;
    //@ requires i <= 5;
    //@ requires i == 5;
    //@ requires i != 5;
    //@ requires i >= 5;
    //@ requires i > 5;
    //@ requires i < 4;
    //@ requires i <= 4;
    //@ requires i == 4;
    //@ requires i != 4;
    //@ requires i >= 4;
    //@ requires i > 4;
    //@ requires i < 3;
    //@ requires i <= 3;
    //@ requires i == 3;
    //@ requires i != 3;
    //@ requires i >= 3;
    //@ requires i > 3;
    //@ requires i < 2;
    //@ requires i <= 2;
    //@ requires i == 2;
    //@ requires i != 2;
    //@ requires i >= 2;
    //@ requires i > 2;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    public static void __Loop_Invariant_Dummy1(int[] original, int n, int[] res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        int[] arr = new int[]{};
        reverse(arr);
        arr = new int[]{1};
        reverse(arr);
        arr = new int[]{1, -2};
        reverse(arr);
        arr = new int[]{1, 1};
        reverse(arr);
        arr = new int[]{1, 2, -7};
        reverse(arr);
        arr = new int[]{1, 1, 2};
        reverse(arr);
        arr = new int[]{7, 1, 3};
        reverse(arr);
        arr = new int[]{-8, 1, 0, 1};
        reverse(arr);
        arr = new int[]{9, 0, 8, -1, 8};
        reverse(arr);
        arr = new int[]{9, 0, 114, -1, 114};
        reverse(arr);
        arr = new int[]{9, -23, 8, -23, 8};
        reverse(arr);
        arr = new int[]{9, -23, 8, 23, -8, 3, 514};
        reverse(arr);
    }
}


