public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:493: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:493:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:492: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:492:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:491: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:491:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:490: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:490:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:489: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:489:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:488: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:488:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:487: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:487:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:486: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:486:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:485: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:485:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:484: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:484:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:483: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:483:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:482: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:482:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:481: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:481:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:480: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:480:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:479: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:479:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:478: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:61:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:478:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:477: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:477:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: Precondition conjunct is false: b != 0
    //@ requires b != 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:476: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:476:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:475: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:475:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:474: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:474:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:473: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56:) in method main
        addLoop(-4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:473:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:468:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:468: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:272: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:467:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:467: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:273: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:466:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:466: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:273: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:465:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:465: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:275: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:464:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:464: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:276: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:463:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:463: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:276: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:462:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:462: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:278: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:461:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:461: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:460:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:460: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:459:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:459: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:458:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:458: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:457:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:457: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:456:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:456: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:284: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:455:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:455: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:285: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:454:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:454: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:285: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:453:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:453: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:285: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:452:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:452: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:287: verify: Precondition conjunct is false: b != 0
    //@ requires b != 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:451:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:451: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:450:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:450: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:449:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:449: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:448:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:448: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:447:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:447: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:291: verify: Precondition conjunct is false: m < b
    //@ requires m < b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:446:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:446: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:291: verify: Precondition conjunct is false: m <= b
    //@ requires m <= b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:445:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:445: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:291: verify: Precondition conjunct is false: m == b
    //@ requires m == b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:444:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:444: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:294: verify: Precondition conjunct is false: m < a
    //@ requires m < a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:443:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:443: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:294: verify: Precondition conjunct is false: m <= a
    //@ requires m <= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:442:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:442: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:294: verify: Precondition conjunct is false: m == a
    //@ requires m == a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:441:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:441: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:297: verify: Precondition conjunct is false: m < 1
    //@ requires m < 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:440:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:440: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:297: verify: Precondition conjunct is false: m <= 1
    //@ requires m <= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:439:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:439: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:297: verify: Precondition conjunct is false: m == 1
    //@ requires m == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:438:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:438: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:300: verify: Precondition conjunct is false: m < 0
    //@ requires m < 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:437:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:437: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:300: verify: Precondition conjunct is false: m <= 0
    //@ requires m <= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:436:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:436: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:300: verify: Precondition conjunct is false: m == 0
    //@ requires m == 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:435:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:435: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:303: verify: Precondition conjunct is false: m < -1
    //@ requires m < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:434:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:434: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:303: verify: Precondition conjunct is false: m <= -1
    //@ requires m <= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:433:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:433: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:303: verify: Precondition conjunct is false: m == -1
    //@ requires m == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:432:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:432: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:308: verify: Precondition conjunct is false: n == m
    //@ requires n == m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:431:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:431: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:309: verify: Precondition conjunct is false: n >= m
    //@ requires n >= m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:430:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:430: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:309: verify: Precondition conjunct is false: n > m
    //@ requires n > m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:429:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:429: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:309: verify: Precondition conjunct is false: n < b
    //@ requires n < b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:428:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:428: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:311: verify: Precondition conjunct is false: n != b
    //@ requires n != b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:427:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:427: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312: verify: Precondition conjunct is false: n > b
    //@ requires n > b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:426:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:426: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312: verify: Precondition conjunct is false: n < a
    //@ requires n < a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:425:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:425: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312: verify: Precondition conjunct is false: n <= a
    //@ requires n <= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:424:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:424: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312: verify: Precondition conjunct is false: n == a
    //@ requires n == a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:423:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:423: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:317: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:422:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:422: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:318: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:421:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:421: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:318: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:420:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:420: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:318: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:419:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:419: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:320: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:418:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:418: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:321: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:417:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:417: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:321: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:416:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:416: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:321: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:415:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:415: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:321: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:414:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:414: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:326: verify: Precondition conjunct is false: i == m
    //@ requires i == m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:413:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:413: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:327: verify: Precondition conjunct is false: i >= m
    //@ requires i >= m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:412:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:412: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:327: verify: Precondition conjunct is false: i > m
    //@ requires i > m;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:411:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:411: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:329: verify: Precondition conjunct is false: i == b
    //@ requires i == b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:410:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:410: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i >= b
    //@ requires i >= b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:409:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:409: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i > b
    //@ requires i > b;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:408:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:408: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i < a
    //@ requires i < a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:407:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:407: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i <= a
    //@ requires i <= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:406:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:406: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i == a
    //@ requires i == a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:405:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:405: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i != a
    //@ requires i != a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:404:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:404: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i >= a
    //@ requires i >= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:403:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:403: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:330: verify: Precondition conjunct is false: i > a
    //@ requires i > a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:402:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:402: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:332: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:401:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:401: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:333: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:400:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:400: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:333: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:399:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:399: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:335: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:398:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:398: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:336: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:397:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:397: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:336: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:396:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:396: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:336: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:395:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:395: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:337: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:394:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:394: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:337: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:393:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:393: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:337: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:392:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:392: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:337: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:391:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:391: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:339: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:390:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:390: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:389:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:389: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:388:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:388: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < m
    //@ requires res < m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:387:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:387: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= m
    //@ requires res <= m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:386:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:386: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == m
    //@ requires res == m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:385:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:385: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != m
    //@ requires res != m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:384:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:384: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= m
    //@ requires res >= m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:383:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:383: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > m
    //@ requires res > m;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:382:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:382: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < b
    //@ requires res < b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:381:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:381: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:380:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:380: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == b
    //@ requires res == b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:379:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:379: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != b
    //@ requires res != b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:378:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:378: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= b
    //@ requires res >= b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:377:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:377: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > b
    //@ requires res > b;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:376:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:376: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < a
    //@ requires res < a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:375:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:375: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= a
    //@ requires res <= a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:374:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:374: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == a
    //@ requires res == a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:373:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:373: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != a
    //@ requires res != a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:372:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:372: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= a
    //@ requires res >= a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:371:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:371: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > a
    //@ requires res > a;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:370:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:370: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < i
    //@ requires res < i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:369:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:369: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= i
    //@ requires res <= i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:368:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:368: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == i
    //@ requires res == i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:367:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:367: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != i
    //@ requires res != i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:366:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:366: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= i
    //@ requires res >= i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:365:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:365: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > i
    //@ requires res > i;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:364:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:364: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:363:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:363: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:362:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:362: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:361:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:361: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:360:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:360: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:359:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:359: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:358:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:358: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:357:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:357: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:356:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:356: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:355:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:355: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:354:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:354: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:353:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:353: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:352:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:352: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:351:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:351: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:350:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:350: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:349:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:349: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:348:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:348: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:347:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:347: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:346:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:346: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res < n
    //@ requires res < n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:345:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:345: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res <= n
    //@ requires res <= n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:344:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:344: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res == n
    //@ requires res == n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:343:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:343: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res != n
    //@ requires res != n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:342:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:342: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res >= n
    //@ requires res >= n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:341:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:341: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:340: verify: Precondition conjunct is false: res > n
    //@ requires res > n;
                     ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < b;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67:
    //@ ensures \result < b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result <= b;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66:
    //@ ensures \result <= b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result == b;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65:
    //@ ensures \result == b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result != b;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    //@ ensures \result != b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result >= b;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63:
    //@ ensures \result >= b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result > b;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62:
    //@ ensures \result > b;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < a;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:61:
    //@ ensures \result < a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result <= a;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60:
    //@ ensures \result <= a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result == a;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59:
    //@ ensures \result == a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result != a;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58:
    //@ ensures \result != a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result >= a;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57:
    //@ ensures \result >= a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result > a;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56:
    //@ ensures \result > a;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55:
    //@ ensures \result < 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54:
    //@ ensures \result <= 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53:
    //@ ensures \result == 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:52:
    //@ ensures \result != 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:51:
    //@ ensures \result >= 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:50:
    //@ ensures \result > 1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:49:
    //@ ensures \result < 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48:
    //@ ensures \result <= 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47:
    //@ ensures \result == 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:46:
    //@ ensures \result != 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45:
    //@ ensures \result >= 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44:
    //@ ensures \result > 0;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43:
    //@ ensures \result < -1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42:
    //@ ensures \result <= -1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41:
    //@ ensures \result == -1;
        ^
2 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:40:
    //@ ensures \result != -1;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:318: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:28:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:318:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
5 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39:
    //@ ensures \result >= -1;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:317: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:317:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
5 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures \result > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:38:
    //@ ensures \result > -1;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:316: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:316:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
5 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    //@ ensures b >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:37:
    //@ ensures b >= 0 ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:315: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:315:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
5 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a == 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:237:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:237: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41: verify: Precondition conjunct is false: a == 1
    //@ requires a == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:314: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:314:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a >= 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:236:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:236: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42: verify: Precondition conjunct is false: a >= 1
    //@ requires a >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:313: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:313:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a > 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:235:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:235: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42: verify: Precondition conjunct is false: a > 1
    //@ requires a > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:312:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a == 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:234:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:234: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: a == 0
    //@ requires a == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:311: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:311:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a >= 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:233:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:233: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Precondition conjunct is false: a >= 0
    //@ requires a >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:310: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:310:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a > 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:232:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:232: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Precondition conjunct is false: a > 0
    //@ requires a > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:309: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:309:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a == -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:231:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:231: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47: verify: Precondition conjunct is false: a == -1
    //@ requires a == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:308: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:308:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a >= -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:230:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:230: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Precondition conjunct is false: a >= -1
    //@ requires a >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:307: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:307:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires a > -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:229:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:229: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Precondition conjunct is false: a > -1
    //@ requires a > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:306: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:306:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b < a;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:228:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:228: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Precondition conjunct is false: b < a
    //@ requires b < a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:305: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:305:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b <= a;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:227:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:227: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Precondition conjunct is false: b <= a
    //@ requires b <= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:304: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:304:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b == a;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:226:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:226: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Precondition conjunct is false: b == a
    //@ requires b == a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:303: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:303:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b == 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:225:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:225: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53: verify: Precondition conjunct is false: b == 1
    //@ requires b == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:302: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:302:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b >= 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:224:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:224: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Precondition conjunct is false: b >= 1
    //@ requires b >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:301: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:301:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b > 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:223:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:223: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Precondition conjunct is false: b > 1
    //@ requires b > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:300: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:300:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b < 0;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:222:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:222: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Precondition conjunct is false: b < 0
    //@ requires b < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:299: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:299:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b != 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:221:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:221: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56: verify: Precondition conjunct is false: b != 0
    //@ requires b != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:298: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:298:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b > 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:220:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:220: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Precondition conjunct is false: b > 0
    //@ requires b > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:297: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:297:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b < -1;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:219:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:219: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Precondition conjunct is false: b < -1
    //@ requires b < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:296: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:296:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b <= -1;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:218:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:218: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Precondition conjunct is false: b <= -1
    //@ requires b <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:295: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:295:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b == -1;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:217:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:217: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Precondition conjunct is false: b == -1
    //@ requires b == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:294: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:294:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m < b;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:216:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:216: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: m < b
    //@ requires m < b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:293: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:293:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m <= b;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:215:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:215: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: m <= b
    //@ requires m <= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:292: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:292:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m == b;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:214:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:214: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: m == b
    //@ requires m == b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:291: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:291:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m < a;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:213:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:213: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Precondition conjunct is false: m < a
    //@ requires m < a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:290: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:290:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m <= a;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:212:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:212: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Precondition conjunct is false: m <= a
    //@ requires m <= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:289: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:289:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m == a;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:211:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:211: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Precondition conjunct is false: m == a
    //@ requires m == a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:288:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m < 1;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:210:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:210: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: Precondition conjunct is false: m < 1
    //@ requires m < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:287: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:287:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m <= 1;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:209:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:209: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: Precondition conjunct is false: m <= 1
    //@ requires m <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:286: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:286:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m == 1;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:208:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:208: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: Precondition conjunct is false: m == 1
    //@ requires m == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:285: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:285:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m < 0;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:207:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:207: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: Precondition conjunct is false: m < 0
    //@ requires m < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:284: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:284:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m <= 0;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:206:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:206: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: Precondition conjunct is false: m <= 0
    //@ requires m <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:283: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:283:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m == 0;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:205:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:205: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: Precondition conjunct is false: m == 0
    //@ requires m == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:282: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:282:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m < -1;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:204:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:204: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: Precondition conjunct is false: m < -1
    //@ requires m < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:281: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:281:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m <= -1;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:203:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:203: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: Precondition conjunct is false: m <= -1
    //@ requires m <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:280: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:280:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m == -1;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:202:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:202: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: Precondition conjunct is false: m == -1
    //@ requires m == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:279:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n == m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:201:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:201: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77: verify: Precondition conjunct is false: n == m
    //@ requires n == m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:278: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:278:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n >= m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:200:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:200: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n >= m
    //@ requires n >= m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:277: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:277:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n > m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:199:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:199: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n > m
    //@ requires n > m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:276: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:276:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n < b;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:198:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:198: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n < b
    //@ requires n < b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:275: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:275:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n != b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:197:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:197: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:80: verify: Precondition conjunct is false: n != b
    //@ requires n != b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:274: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:274:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n > b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:196:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:196: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: Precondition conjunct is false: n > b
    //@ requires n > b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:273: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:273:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n < a;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:195:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:195: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: Precondition conjunct is false: n < a
    //@ requires n < a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:272: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:272:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n <= a;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:194:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:194: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: Precondition conjunct is false: n <= a
    //@ requires n <= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:271: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:271:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n == a;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:193:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:193: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: Precondition conjunct is false: n == a
    //@ requires n == a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:270: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:270:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:192:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:192: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:86: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:269: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:269:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:191:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:191: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:268: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:268:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:190:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:190: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:267: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:267:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:189:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:189: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:266: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:266:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:188:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:188: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:265: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:265:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:187:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:187: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:264: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:264:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:186:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:186: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:263: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:263:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:185:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:185: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:262: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:262:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:184:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:184: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:261: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:261:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i == m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:183:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:183: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:95: verify: Precondition conjunct is false: i == m
    //@ requires i == m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:260: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:260:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:182:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:182: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= m
    //@ requires i >= m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:259: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:259:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:181:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:181: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > m
    //@ requires i > m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:258: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:258:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:180:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:180: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < b
    //@ requires i < b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:257: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:257:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= b;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:179:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:179: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= b
    //@ requires i <= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:256: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:256:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == b;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:178:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:178: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == b
    //@ requires i == b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:255: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:255:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != b;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:177:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:177: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != b
    //@ requires i != b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:254: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:254:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= b;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:176:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:176: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= b
    //@ requires i >= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:253: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:253:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > b;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:175:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:175: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > b
    //@ requires i > b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:252: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:252:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < a;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:174:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < a
    //@ requires i < a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:251: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:251:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= a;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:173:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= a
    //@ requires i <= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:250: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:250:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == a;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:172:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == a
    //@ requires i == a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:249: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:249:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != a;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:171:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != a
    //@ requires i != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:248: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:248:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= a;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:170:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= a
    //@ requires i >= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:247: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:247:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > a;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:169:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > a
    //@ requires i > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:246: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:246:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:168:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:245: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:245:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:167:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:244: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:244:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:166:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:243: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:243:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:165:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:242: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:242:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:241: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:241:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:163:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:240: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:240:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:162:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:239: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:239:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:161:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:238: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:238:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:160:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:237: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:237:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:159:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:236: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:236:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:235: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:235:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:234: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:234:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:233: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:233:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:232: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:232:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:231: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:231:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:230: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:230:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:229: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:229:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:228: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:228:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i < n
    //@ requires i < n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:227: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:227:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i <= n
    //@ requires i <= n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:226: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:226:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:225: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:225:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i != n
    //@ requires i != n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:224: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:224:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i >= n;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:223: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:223:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i > n;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:222: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:222:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < m
    //@ requires res < m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:221: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:221:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= m
    //@ requires res <= m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:220: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:220:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == m
    //@ requires res == m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:219: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:219:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != m
    //@ requires res != m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:218: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:218:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= m
    //@ requires res >= m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:217: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:217:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > m
    //@ requires res > m;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:216: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:216:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < b;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < b
    //@ requires res < b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:215: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:215:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= b;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= b
    //@ requires res <= b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:214: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:214:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == b;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == b
    //@ requires res == b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:213: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:213:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != b;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != b
    //@ requires res != b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:212: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:212:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= b;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= b
    //@ requires res >= b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:211: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:211:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > b;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > b
    //@ requires res > b;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:210: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:210:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < a;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < a
    //@ requires res < a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:209: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:209:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= a;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:131:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= a
    //@ requires res <= a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:208: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:208:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == a;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:130:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == a
    //@ requires res == a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:207: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:207:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != a;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:129:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != a
    //@ requires res != a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:206: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:206:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= a;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= a
    //@ requires res >= a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:205: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:205:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > a;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:127:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > a
    //@ requires res > a;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:204: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:204:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < i;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:126:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < i
    //@ requires res < i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:203: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:203:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= i;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:125:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= i
    //@ requires res <= i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:202: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:202:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == i;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == i
    //@ requires res == i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:201: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:201:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != i;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != i
    //@ requires res != i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:200: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:200:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= i;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:122:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= i
    //@ requires res >= i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:199:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > i;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:121:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > i
    //@ requires res > i;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:198:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:120:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:197:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:196:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:195:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:194:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:193:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:192:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:191:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:190:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:189:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:188:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:187:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:186:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:185:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:107:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:184:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:106:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:183:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:105:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:182:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:104:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:181:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:180:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res < n
    //@ requires res < n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:179:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:101:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res <= n
    //@ requires res <= n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:178: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:178:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res == n
    //@ requires res == n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:177: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:177:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:99:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res != n
    //@ requires res != n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:176: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:176:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res >= n;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res >= n
    //@ requires res >= n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:175: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:175:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires res > n;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:97:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:29:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: Precondition conjunct is false: res > n
    //@ requires res > n;
                     ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:174:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:173:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:172:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:22:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:171:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:21:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:170:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:169:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:168:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:167:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:166:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: Precondition conjunct is false: b >= 0
    //@ requires b >= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:165:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Precondition conjunct is false: b >= -1
    //@ requires b >= -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:) in method main
        addLoop(0, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Precondition conjunct is false: b > -1
    //@ requires b > -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:164:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:163:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:162:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102: verify: Precondition conjunct is false: b >= 0
    //@ requires b >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:161:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103: verify: Precondition conjunct is false: b >= -1
    //@ requires b >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:160:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103: verify: Precondition conjunct is false: b > -1
    //@ requires b > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:159:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118: verify: Precondition conjunct is false: n < m
    //@ requires n < m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:158:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118: verify: Precondition conjunct is false: n <= m
    //@ requires n <= m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:157:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119: verify: Precondition conjunct is false: n <= b
    //@ requires n <= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:156:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119: verify: Precondition conjunct is false: n == b
    //@ requires n == b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:155:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:154:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:153:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:152:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:151:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i < m
    //@ requires i < m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:150:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= m;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i <= m
    //@ requires i <= m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:149:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != m;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i != m
    //@ requires i != m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:148:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < b;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i < b
    //@ requires i < b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:147:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= b;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i <= b
    //@ requires i <= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:146:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != b;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i != b
    //@ requires i != b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:145:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:144:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:143:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:142:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:141:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 0;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:140:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:139:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:138:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b >= a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:86:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39: verify: Precondition conjunct is false: b >= a
    //@ requires b >= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:137:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b > a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:85:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39: verify: Precondition conjunct is false: b > a
    //@ requires b > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:136:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b == 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: b == 0
    //@ requires b == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:135:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b >= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:83:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: b >= 0
    //@ requires b >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:134:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b >= -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:82:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: b >= -1
    //@ requires b >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:133:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires b > -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: b > -1
    //@ requires b > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:132:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n < m;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:80:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59: verify: Precondition conjunct is false: n < m
    //@ requires n < m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:131:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n <= m;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:79:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59: verify: Precondition conjunct is false: n <= m
    //@ requires n <= m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:130:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n <= b;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: n <= b
    //@ requires n <= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:129:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n == b;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: n == b
    //@ requires n == b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:128:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:127:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n <= 1;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:126:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:125: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:125:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n == 0;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:124:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:123:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:122: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:122:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:121: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:121:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:120: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:120:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:88: verify: Precondition conjunct is false: m != a
    //@ requires m != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:119:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89: verify: Precondition conjunct is false: m > a
    //@ requires m > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:118:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: m >= 1
    //@ requires m >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:117:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: m > 1
    //@ requires m > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:116:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Precondition conjunct is false: m != 0
    //@ requires m != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:115:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:91: verify: Precondition conjunct is false: m > 0
    //@ requires m > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:114:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ ensures a >= 0 ==> \result >= 0;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method addLoop
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26:
    //@ ensures a >= 0 ==> \result >= 0;
        ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:113:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
5 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a < 0;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:31: verify: Precondition conjunct is false: a < 0
    //@ requires a < 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:112:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:32: verify: Precondition conjunct is false: a != 0
    //@ requires a != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:111:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a < -1;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:32: verify: Precondition conjunct is false: a < -1
    //@ requires a < -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:110:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a <= -1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:32: verify: Precondition conjunct is false: a <= -1
    //@ requires a <= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:109:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m != a;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42: verify: Precondition conjunct is false: m != a
    //@ requires m != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:108:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m > a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: m > a
    //@ requires m > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:107: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:107:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: m >= 1
    //@ requires m >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:106: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:106:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m > 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: m > 1
    //@ requires m > 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:105: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:105:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m != 0;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Precondition conjunct is false: m != 0
    //@ requires m != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:104: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:104:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m > 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Precondition conjunct is false: m > 0
    //@ requires m > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:103:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:102:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:101: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:101:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11:) in method main
        addLoop(4, 0);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:93:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:100:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:92:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:99: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:99:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:91:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:61: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:98:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77: verify: Precondition conjunct is false: n != m
    //@ requires n != m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:97: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:97:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n != a
    //@ requires n != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:96:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:88:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n >= a
    //@ requires n >= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:95: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:95:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:19:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: Precondition conjunct is false: n > a
    //@ requires n > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:94: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:94:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a < 1;
    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25: verify: Precondition conjunct is false: a < 1
    //@ requires a < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:93: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:93:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a <= 1;
    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25: verify: Precondition conjunct is false: a <= 1
    //@ requires a <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:92: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:92:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a <= 0;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26: verify: Precondition conjunct is false: a <= 0
    //@ requires a <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:91: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:91:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n != m;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:42: verify: Precondition conjunct is false: n != m
    //@ requires n != m;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:90:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != a;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: n != a
    //@ requires n != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:89:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= a;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: n >= a
    //@ requires n >= a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:88: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:88:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n > a;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:52:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Precondition conjunct is false: n > a
    //@ requires n > a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:87:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:86: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:86:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:85: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:85:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8:) in method main
        addLoop(0, 4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:84:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:53: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:83: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:83:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:82: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:82:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: Precondition conjunct is false: m != b
    //@ requires m != b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:81:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: Precondition conjunct is false: m >= b
    //@ requires m >= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:80: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:80:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:16:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: Precondition conjunct is false: m > b
    //@ requires m > b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:79: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:79:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b < 1;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25: verify: Precondition conjunct is false: b < 1
    //@ requires b < 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:78:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b <= 1;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:25: verify: Precondition conjunct is false: b <= 1
    //@ requires b <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:77:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b <= 0;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:46:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:26: verify: Precondition conjunct is false: b <= 0
    //@ requires b <= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m != b;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27: verify: Precondition conjunct is false: m != b
    //@ requires m != b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= b;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27: verify: Precondition conjunct is false: m >= b
    //@ requires m >= b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m > b;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27: verify: Precondition conjunct is false: m > b
    //@ requires m > b;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:) in method main
        addLoop(-4, -4);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:15:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:76:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != a;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:23: verify: Precondition conjunct is false: b != a
    //@ requires b != a;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:75:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:74:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:41: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:73:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:14:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:45: verify: Precondition conjunct is false: m != 1
    //@ requires m != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:72:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != 1;
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:20: verify: Precondition conjunct is false: a != 1
    //@ requires a != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:71:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m != 1;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:38:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:10:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:24: verify: Precondition conjunct is false: m != 1
    //@ requires m != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:70:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5:) in method main
        addLoop(1, -1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:40: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:69:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:13:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:46: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:68:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires b != -1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:36:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:21: verify: Precondition conjunct is false: b != -1
    //@ requires b != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:67:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n != 1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:35:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:9:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:27: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:66:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires a != -1;
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:65:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
3 verification failures

public class AddTwoLoop {
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:50:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:12:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:35: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:64:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires a != -1;
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:33:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:8:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:18: verify: Precondition conjunct is false: a != -1
    //@ requires a != -1;
                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:63:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
6 verification failures

public class AddTwoLoop {
    //@ requires b != 1;
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3:) in method main
        addLoop(-1, 1);
               ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:3: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:62:
    public static int addLoop(int a, int b) {
                      ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:2: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
3 verification failures

public class AddTwoLoop {
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47:) in method addLoop
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:11:
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:33: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
3 verification failures

public class AddTwoLoop {
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires b != 1;
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}

/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:31:) in method addLoop
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
                                   ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:7:
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
                       ^
/home/max/Documents/JMLGPT/tmp/AddTwoLoop.java:17: verify: Precondition conjunct is false: b != 1
    //@ requires b != 1;
                   ^
3 verification failures

public class AddTwoLoop {
    public static int addLoop(int a, int b) {
        int m = ((a < 0) ? -a : a);
        int n = ((b < 0) ? -b : b);
        int res = 0;
        for(int i = 0; i < m; i++){
            __Loop_Invariant_Dummy1(a,b,m,n,i,res);
            res = res + ((a < 0) ? -1 : 1);
        }
        for(int i = 0; i < n; i++){
            __Loop_Invariant_Dummy2(a,b,m,n,i,res);
            res = res + ((b < 0) ? -1 : 1);
        }
        return res;
    }

    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < m;
    //@ requires i <= m;
    //@ requires i != m;
    public static void __Loop_Invariant_Dummy1(int a, int b, int m, int n, int i, int res) {}
    
    //@ requires m >= a;
    //@ requires m >= 0;
    //@ requires m != -1;
    //@ requires m >= -1;
    //@ requires m > -1;
    //@ requires n >= b;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i != n;
    public static void __Loop_Invariant_Dummy2(int a, int b, int m, int n, int i, int res) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        addLoop(-4, 0);
        addLoop(0, -4);
        addLoop(4, 0);
        addLoop(0, 4);
        addLoop(-4, -4);
        addLoop(4, 4);
        addLoop(0, 0);
        addLoop(-4, 4);
        addLoop(4, -4);
        addLoop(1, -1);
        addLoop(-1, 1);
    }
}


