class MyPower {
    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:199: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:76:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:199:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:2: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:198: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:75:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:198:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:4: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:197: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:74:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:197:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:5: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:196: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:73:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:196:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:5: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:195: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:72:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:195:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:5: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:194: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:71:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:194:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:5: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:193: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:70:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:193:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:8: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:192: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:69:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:192:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:8: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:191: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:68:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:191:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:8: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:190: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:67:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:190:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:11: verify: Precondition conjunct is false: n < x
    //@ requires n < x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:189: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:66:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:189:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:13: verify: Precondition conjunct is false: n != x
    //@ requires n != x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:188: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:65:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:188:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:14: verify: Precondition conjunct is false: n > x
    //@ requires n > x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:187: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:64:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:187:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:14: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:186: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:63:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:186:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:16: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:185: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:185:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:184: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:61:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:184:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:183: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:60:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:183:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:182: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:182:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:181: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:58:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:181:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:180: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:57:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:180:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:179: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:56:) in method main
        power(1, 1);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:179:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x < 1;
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:174:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:174: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:66: verify: Precondition conjunct is false: x < 1
    //@ requires x < 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x != 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:173:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:173: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:68: verify: Precondition conjunct is false: x != 1
    //@ requires x != 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x > 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:172:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:172: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:69: verify: Precondition conjunct is false: x > 1
    //@ requires x > 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x < 0;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:171:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:171: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:69: verify: Precondition conjunct is false: x < 0
    //@ requires x < 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x <= 0;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:170:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:170: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:69: verify: Precondition conjunct is false: x <= 0
    //@ requires x <= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x == 0;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:169:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:169: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:69: verify: Precondition conjunct is false: x == 0
    //@ requires x == 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x < -1;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:168:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:168: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:72: verify: Precondition conjunct is false: x < -1
    //@ requires x < -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x <= -1;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:167:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:167: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:72: verify: Precondition conjunct is false: x <= -1
    //@ requires x <= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x == -1;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:166:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:166: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:72: verify: Precondition conjunct is false: x == -1
    //@ requires x == -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n < x;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:165:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:165: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:75: verify: Precondition conjunct is false: n < x
    //@ requires n < x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n != x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:164:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:164: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:77: verify: Precondition conjunct is false: n != x
    //@ requires n != x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n > x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:163:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:163: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:78: verify: Precondition conjunct is false: n > x
    //@ requires n > x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n < 1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:162:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:162: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:78: verify: Precondition conjunct is false: n < 1
    //@ requires n < 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n != 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:161:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:161: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:80: verify: Precondition conjunct is false: n != 1
    //@ requires n != 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n > 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:160:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:160: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:81: verify: Precondition conjunct is false: n > 1
    //@ requires n > 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n < 0;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:159:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:159: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:81: verify: Precondition conjunct is false: n < 0
    //@ requires n < 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n <= 0;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:158:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:158: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:81: verify: Precondition conjunct is false: n <= 0
    //@ requires n <= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n == 0;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:157:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:157: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:81: verify: Precondition conjunct is false: n == 0
    //@ requires n == 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n < -1;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:156:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:156: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:84: verify: Precondition conjunct is false: n < -1
    //@ requires n < -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n <= -1;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:155:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:155: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:84: verify: Precondition conjunct is false: n <= -1
    //@ requires n <= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n == -1;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:154:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:154: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:84: verify: Precondition conjunct is false: n == -1
    //@ requires n == -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res == x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:153:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:153: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: res == x
    //@ requires res == x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < x;
    //@ requires res <= x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:152:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:152: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res < x
    //@ requires res < x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= x;
    //@ requires res != x;
    //@ requires res >= x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:151:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:151: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: res >= x
    //@ requires res >= x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= x;
    //@ requires res != x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:150:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:150: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res <= x
    //@ requires res <= x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != x;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:149:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:149: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res != x
    //@ requires res != x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > x;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:148:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:148: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res > x
    //@ requires res > x;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < 1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:147:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:147: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res < 1
    //@ requires res < 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res != 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:146:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:146: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: res != 1
    //@ requires res != 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= 1;
    //@ requires res == 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:145:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:145: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: res == 1
    //@ requires res == 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= 1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:144:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:144: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res <= 1
    //@ requires res <= 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:143:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:143: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res >= 1
    //@ requires res >= 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:142:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:142: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res > 1
    //@ requires res > 1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res == 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:141:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:141: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: res == 0
    //@ requires res == 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res < 0;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:140:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:140: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res < 0
    //@ requires res < 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res <= 0;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:139:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:139: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res <= 0
    //@ requires res <= 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res < -1;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:138:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:138: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Precondition conjunct is false: res < -1
    //@ requires res < -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res <= -1;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:137:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:137: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Precondition conjunct is false: res <= -1
    //@ requires res <= -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res == -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:136:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:136: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Precondition conjunct is false: res == -1
    //@ requires res == -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != 0;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:135:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:135: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res != 0
    //@ requires res != 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res < n;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:134:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:134: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Precondition conjunct is false: res < n
    //@ requires res < n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res != n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:133:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:133: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:94: verify: Precondition conjunct is false: res != n
    //@ requires res != n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res >= n;
    //@ requires res > n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:132:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:132: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:95: verify: Precondition conjunct is false: res > n
    //@ requires res > n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res <= n;
    //@ requires res == n;
    //@ requires res >= n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:131:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:131: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Precondition conjunct is false: res <= n
    //@ requires res <= n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res >= 0;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res == n;
    //@ requires res >= n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:130:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:130: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res >= 0
    //@ requires res >= 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res == n;
    //@ requires res >= n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:129:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:129: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:91: verify: Precondition conjunct is false: res == n
    //@ requires res == n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i < x;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:128:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:128: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Precondition conjunct is false: i < x
    //@ requires i < x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i == x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:127:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:93: verify: Precondition conjunct is false: i == x
    //@ requires i == x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i >= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:126:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:94: verify: Precondition conjunct is false: i >= x
    //@ requires i >= x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i != x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:125:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:93: verify: Precondition conjunct is false: i != x
    //@ requires i != x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i > x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:124:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:93: verify: Precondition conjunct is false: i > x
    //@ requires i > x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i == res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:123:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:95: verify: Precondition conjunct is false: i == res
    //@ requires i == res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res > 0;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:122:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res > 0
    //@ requires res > 0;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= x;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:121:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:91: verify: Precondition conjunct is false: i <= x
    //@ requires i <= x;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i < res;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:120:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:91: verify: Precondition conjunct is false: i < res
    //@ requires i < res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= res;
    //@ requires i != res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:119:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:119: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Precondition conjunct is false: i != res
    //@ requires i != res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= res;
    //@ requires i >= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:118:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Precondition conjunct is false: i >= res
    //@ requires i >= res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires res >= n;
    //@ requires i <= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:117:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Precondition conjunct is false: res >= n
    //@ requires res >= n;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res >= -1;
    //@ requires res > -1;
    //@ requires i <= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:116:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: res >= -1
    //@ requires res >= -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires res > -1;
    //@ requires i <= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:115:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: res > -1
    //@ requires res > -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires i <= res;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:114:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i <= res
    //@ requires i <= res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires i > res;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:113:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i > res
    //@ requires i > res;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires res != -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:112:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: res != -1
    //@ requires res != -1;
                     ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i < 1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:111:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i < 1
    //@ requires i < 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i != 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:110:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:110: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: i != 1
    //@ requires i != 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i == 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:109:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i == 1
    //@ requires i == 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i >= 1;
    //@ requires i > 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:108:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: i > 1
    //@ requires i > 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i >= 1;
    //@ requires i < 0;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:107:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: i < 0
    //@ requires i < 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i <= 1;
    //@ requires i >= 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:106:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i <= 1
    //@ requires i <= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i >= 1;
    //@ requires i <= 0;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:105:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i <= 0
    //@ requires i <= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i >= 1;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:104:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i >= 1
    //@ requires i >= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i == 0;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:103:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i == 0
    //@ requires i == 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i >= 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:102:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i >= 0
    //@ requires i >= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i > 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:101:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:101: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i > 0
    //@ requires i > 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i < -1;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:100:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:100: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i < -1
    //@ requires i < -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i == -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:99:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: i == -1
    //@ requires i == -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= -1;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:98:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i <= -1
    //@ requires i <= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i < n;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:97:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:91: verify: Precondition conjunct is false: i < n
    //@ requires i < n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i != -1;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:96:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i != -1
    //@ requires i != -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i >= -1;
    //@ requires i > -1;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:95:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Precondition conjunct is false: i > -1
    //@ requires i > -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i >= -1;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:94:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i >= -1
    //@ requires i >= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i != n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:93:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:93: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Precondition conjunct is false: i != n
    //@ requires i != n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i <= n;
    //@ requires i == n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:92:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i <= n
    //@ requires i <= n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i == n;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:91:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i == n
    //@ requires i == n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i != 0;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:90:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i != 0
    //@ requires i != 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i >= n;
    //@ requires i > n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:89:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Precondition conjunct is false: i > n
    //@ requires i > n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ requires i >= n;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:88:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:87: verify: Precondition conjunct is false: i >= n
    //@ requires i >= n;
                   ^
3 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result == x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:25:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:63:
    //@ ensures \result == x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result >= x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:26:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    //@ ensures \result >= x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result > x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:26:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:61:
    //@ ensures \result > x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < x;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:60:
    //@ ensures \result < x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result == 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:27:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    //@ ensures \result == 1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result >= 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:28:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:58:
    //@ ensures \result >= 1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result > 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:28:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:57:
    //@ ensures \result > 1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result == 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:30:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:56:
    //@ ensures \result == 0;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result >= 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:55:
    //@ ensures \result >= 0;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result > 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:54:
    //@ ensures \result > 0;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= x;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:53:
    //@ ensures \result <= x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result < -1;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:30:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:52:
    //@ ensures \result < -1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != x;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:51: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:51:
    //@ ensures \result != x;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result != -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:50: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:50:
    //@ ensures \result != -1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result > -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:49: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:32:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:49:
    //@ ensures \result > -1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result == n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:48: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:34:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:48:
    //@ ensures \result == n;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures \result >= n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:47: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:35:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:47:
    //@ ensures \result >= n;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result == -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:46: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:30:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:46:
    //@ ensures \result == -1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures \result > n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:45: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:34:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:45:
    //@ ensures \result > n;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures x >= 0 ==> \result >= 0;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:44: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:34:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:44:
    //@ ensures x >= 0 ==> \result >= 0;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result < 1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:43: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:43:
    //@ ensures \result < 1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result <= 1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:42: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:42:
    //@ ensures \result <= 1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result >= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:41: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:28:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:41:
    //@ ensures \result >= -1;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    //@ ensures n >= 0 ==> \result >= 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:40: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:40:
    //@ ensures n >= 0 ==> \result >= 0;
        ^
2 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:68: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:) in method main
        power(1, 2);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:68:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:11: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:24:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:39:
    //@ ensures \result < 0;
        ^
5 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:67: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:30:) in method main
        power(1, 2);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:67:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:11: verify: Precondition conjunct is false: n == x
    //@ requires n == x;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:38: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:38:
    //@ ensures \result < 0;
        ^
5 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:66: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:29:) in method main
        power(1, 2);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:66:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:12: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:37: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:21:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:37:
    //@ ensures \result != 1;
        ^
5 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= x;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:28:) in method main
        power(1, 2);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:65:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:12: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:36: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:36:
    //@ ensures \result != 1;
        ^
5 verification failures

class MyPower {
    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:65: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:27:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:65:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:2: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:47: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
6 verification failures

class MyPower {
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:64: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:26:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:64:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:2: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:58:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:33:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:46: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
6 verification failures

class MyPower {
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= x;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:63: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:25:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:63:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Precondition conjunct is false: n >= x
    //@ requires n >= x;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:57:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:29:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:36: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:62: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:24:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:62:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:56:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:31:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:35: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:61:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:55:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:30:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:22:) in method main
        power(2, 0);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:60:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:10: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:54:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:29:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:33: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:61: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:21:) in method main
        power(-3, 5);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:61:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:2: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:53:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:28:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:32: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:60: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:) in method main
        power(-3, 5);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:60:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:3: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:27: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:52:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:27:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:31: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:59: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:19:) in method main
        power(-3, 5);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:19: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:59:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:3: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:51:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:26:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:58: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:18:) in method main
        power(-3, 5);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:18: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:58:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:4: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:25: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:50:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:25:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires x > -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:57: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:17:) in method main
        power(-3, 5);
             ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:57:
    public static int power(int x, int n) {
                      ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:4: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:24: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:49:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:24:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
6 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x == 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:48:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:48: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Precondition conjunct is false: x == 1
    //@ requires x == 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x >= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:47:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:47: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Precondition conjunct is false: x >= 1
    //@ requires x >= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x <= 1;
    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:46:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:46: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:27: verify: Precondition conjunct is false: x <= 1
    //@ requires x <= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n == x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:45:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:45: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Precondition conjunct is false: n == x
    //@ requires n == x;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x >= 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:44:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:44: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Precondition conjunct is false: x >= 0
    //@ requires x >= 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x > 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:43:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:43: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:28: verify: Precondition conjunct is false: x > 0
    //@ requires x > 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires x >= -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:42:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:42: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: x >= -1
    //@ requires x >= -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires x > -1;
    //@ requires n <= x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:41:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: x > -1
    //@ requires x > -1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n <= x;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:40:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n <= x
    //@ requires n <= x;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= x;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:39:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n >= x
    //@ requires n >= x;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n <= 1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:38:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n <= 1
    //@ requires n <= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n == 1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:37:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n == 1
    //@ requires n == 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:36:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n >= 1
    //@ requires n >= 1;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n != 0;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:35:) in method power
            __Loop_Invariant_Dummy1(x, n, res, i);
                                   ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:29: verify: Precondition conjunct is false: n != 0
    //@ requires n != 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n > 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:34:) in method power
        __Loop_Invariant_Dummy1(x, n, res, i);
                               ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}
                       ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:30: verify: Precondition conjunct is false: n > 0
    //@ requires n > 0;
                   ^
3 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result < 0;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:9:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:24:
    //@ ensures \result < 0;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result <= 0;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:9:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:23:
    //@ ensures \result <= 0;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result <= -1;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:10:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:22:
    //@ ensures \result <= -1;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result < n;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:10:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:21:
    //@ ensures \result < n;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 1;
    //@ ensures \result != 0;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:20: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:8:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:20:
    //@ ensures \result != 1;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 0;
    //@ ensures \result <= n;
    //@ ensures \result != n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:19: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:10:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:10: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:19:
    //@ ensures \result != n;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 0;
    //@ ensures \result <= n;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:18: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:9:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:9: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:18:
    //@ ensures \result <= n;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    //@ ensures \result != 0;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}


/home/max/Documents/JMLGPT/tmp/MyPower.java:17: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/MyPower.java:8:) in method power
        return res;
        ^
/home/max/Documents/JMLGPT/tmp/MyPower.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/MyPower.java:17:
    //@ ensures \result != 0;
        ^
2 verification failures

class MyPower {
    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static int power(int x, int n) {
        int res = 1;
        int i;
        for(i = 0; i < n; i++) {
            __Loop_Invariant_Dummy1(x, n, res, i);
	        res = res * x;
        }
        __Loop_Invariant_Dummy1(x, n, res, i);
        return res;
    }

    //@ requires x != 0;
    //@ requires x != -1;
    //@ requires n >= 0;
    //@ requires n != -1;
    //@ requires n >= -1;
    //@ requires n > -1;
    public static void __Loop_Invariant_Dummy1(int x, int n, int res, int i) {}

    //@ requires \nonnullelements(args);
    public static void main(String[] args) {
        power(1, 1);
        power(1, 2);
        power(2, 0);
        power(3, 5);
        power(-3, 5);
        power(4, 3);
    }
}



