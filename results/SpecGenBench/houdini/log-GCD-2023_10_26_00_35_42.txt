public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:174: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:77:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:174:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Precondition conjunct is false: num1 == 1
	//@ requires num1 == 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:173: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:76:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:173:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:6: verify: Precondition conjunct is false: num1 >= 1
	//@ requires num1 >= 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:172: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:75:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:75: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:172:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:6: verify: Precondition conjunct is false: num1 > 1
	//@ requires num1 > 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:171: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:74:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:171:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: Precondition conjunct is false: num1 == 0
	//@ requires num1 == 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:170: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:73:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:73: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:170:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:9: verify: Precondition conjunct is false: num1 >= 0
	//@ requires num1 >= 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:169: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:72:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:169:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:9: verify: Precondition conjunct is false: num1 > 0
	//@ requires num1 > 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:168: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:71:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:168:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:11: verify: Precondition conjunct is false: num1 == -1
	//@ requires num1 == -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:167: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:70:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:167:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: Precondition conjunct is false: num1 >= -1
	//@ requires num1 >= -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:166: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:69:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:69: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:166:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: Precondition conjunct is false: num1 > -1
	//@ requires num1 > -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:165: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:68:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:68: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:165:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:14: verify: Precondition conjunct is false: num2 == 1
	//@ requires num2 == 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:164: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:67:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:164:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:15: verify: Precondition conjunct is false: num2 >= 1
	//@ requires num2 >= 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:163: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:66:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:163:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:15: verify: Precondition conjunct is false: num2 > 1
	//@ requires num2 > 1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:162: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:65:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:162:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:15: verify: Precondition conjunct is false: num2 < 0
	//@ requires num2 < 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:161: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:64:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:161:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:17: verify: Precondition conjunct is false: num2 != 0
	//@ requires num2 != 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:160: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:63:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:160:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: verify: Precondition conjunct is false: num2 > 0
	//@ requires num2 > 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:159: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:62:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:159:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: verify: Precondition conjunct is false: num2 < -1
	//@ requires num2 < -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:158: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:61:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:158:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: verify: Precondition conjunct is false: num2 <= -1
	//@ requires num2 <= -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:157: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:60:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:157:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:18: verify: Precondition conjunct is false: num2 == -1
	//@ requires num2 == -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:156: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:59:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:156:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:21: verify: Precondition conjunct is false: num2 < num1
	//@ requires num2 < num1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:155: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:58:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:155:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:21: verify: Precondition conjunct is false: num2 <= num1
	//@ requires num2 <= num1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:154: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:57:) in method __HoudiniInvoker
        gcd(-4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:154:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:21: verify: Precondition conjunct is false: num2 == num1
	//@ requires num2 == num1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result < 1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:66: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:24:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:66:
	//@ ensures \result < 1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result <= 1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:65: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:24:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:65:
	//@ ensures \result <= 1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result == 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:64: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:24:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:64:
	//@ ensures \result == 1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result < 0;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:63: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:27:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:63:
	//@ ensures \result < 0;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result <= 0;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:62: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:27:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:62:
	//@ ensures \result <= 0;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result == 0;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:61: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:27:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:61:
	//@ ensures \result == 0;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result < num2;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:60: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:30:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:60:
	//@ ensures \result < num2;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result <= num2;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:59: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:30:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:59:
	//@ ensures \result <= num2;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result == num2;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:58: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:30:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:58:
	//@ ensures \result == num2;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result < -1;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:57: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:33:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:57:
	//@ ensures \result < -1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result <= -1;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:56: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:33:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:56:
	//@ ensures \result <= -1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result == -1;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:55: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:33:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:55:
	//@ ensures \result == -1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result < num1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:36:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:54:
	//@ ensures \result < num1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result <= num1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:36:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:53:
	//@ ensures \result <= num1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result == num1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:36:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:52:
	//@ ensures \result == num1;
	    ^
2 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:139: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:41:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:41: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:139:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:6: verify: Precondition conjunct is false: num1 < 0
	//@ requires num1 < 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:138: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:40:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:40: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:138:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: Precondition conjunct is false: num1 != 0
	//@ requires num1 != 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:137: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:39:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:39: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:137:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: Precondition conjunct is false: num1 < -1
	//@ requires num1 < -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 <= -1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:136: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:38:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:38: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:136:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: Precondition conjunct is false: num1 <= -1
	//@ requires num1 <= -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:135: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:37:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:135:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: Precondition conjunct is false: num2 == 0
	//@ requires num2 == 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 >= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:134: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:36:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:134:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:12: verify: Precondition conjunct is false: num2 >= 0
	//@ requires num2 >= 0;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:133: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:35:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:35: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:133:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:13: verify: Precondition conjunct is false: num2 >= -1
	//@ requires num2 >= -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:132: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:34:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:34: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:132:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:13: verify: Precondition conjunct is false: num2 > -1
	//@ requires num2 > -1;
	                  ^
3 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:131: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:33:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:131:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:14: verify: Precondition conjunct is false: num2 >= num1
	//@ requires num2 >= num1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:47: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:127:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:127: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:47:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:55: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ requires num2 > num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:32:) in method __HoudiniInvoker
        gcd(0, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:32: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:130:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:14: verify: Precondition conjunct is false: num2 > num1
	//@ requires num2 > num1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:46: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:126:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:126: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:46:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:31:) in method __HoudiniInvoker
        gcd(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:130:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:3: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:45: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:125:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:125: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:45:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 <= 1;
	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:30:) in method __HoudiniInvoker
        gcd(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:129:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:3: verify: Precondition conjunct is false: num1 <= 1
	//@ requires num1 <= 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:44: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:124:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:124: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:44:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 <= 0;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:29:) in method __HoudiniInvoker
        gcd(4, 0);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:29: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:128:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Precondition conjunct is false: num1 <= 0
	//@ requires num1 <= 0;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:43: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:123:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:123: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:43:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:51: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 != -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:28:) in method __HoudiniInvoker
        gcd(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:28: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:128:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Precondition conjunct is false: num2 < 1
	//@ requires num2 < 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:42: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:122:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:122: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:42:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:50: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 != -1;
	//@ requires num2 <= 1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:127: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:27:) in method __HoudiniInvoker
        gcd(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:27: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:127:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Precondition conjunct is false: num2 <= 1
	//@ requires num2 <= 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:41: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:121:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:121: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:41:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 != -1;
	//@ requires num2 != 1;
	//@ requires num2 <= 0;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:26:) in method __HoudiniInvoker
        gcd(0, 4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:126:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:6: verify: Precondition conjunct is false: num2 <= 0
	//@ requires num2 <= 0;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:40: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:120:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:120: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:40:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 != -1;
	//@ requires num2 != 1;
	//@ requires num2 != -1;
	//@ requires num2 != num1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:126: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:25:) in method __HoudiniInvoker
        gcd(-4, -4);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:25: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:126:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:7: verify: Precondition conjunct is false: num2 != num1
	//@ requires num2 != num1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:35: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:14:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:35:
	//@ ensures \result != num2;
	    ^
5 verification failures

public class GCD {

	//@ requires num1 != 1;
	//@ requires num1 != -1;
	//@ requires num2 != 1;
	//@ requires num2 != -1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:130: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:24:) in method __HoudiniInvoker
        gcd(1, -1);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:24: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:130:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:3: verify: Precondition conjunct is false: num1 != 1
	//@ requires num1 != 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:38: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:118:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:118: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:38:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:46: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != -1;
	//@ requires num2 != 1;
	//@ requires num2 != -1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:23:) in method __HoudiniInvoker
        gcd(1, -1);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:23: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:129:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Precondition conjunct is false: num2 != -1
	//@ requires num2 != -1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:37: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:117:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:117: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:37:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:45: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num1 != -1;
	//@ requires num2 != 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:129: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:22:) in method __HoudiniInvoker
        gcd(-1, 1);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:22: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:129:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:3: verify: Precondition conjunct is false: num1 != -1
	//@ requires num1 != -1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:36: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:116:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:116: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:36:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:44: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ requires num2 != 1;
	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:128: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:21:) in method __HoudiniInvoker
        gcd(-1, 1);
           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:21: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:128:
	public int gcd(int num1, int num2){
	           ^
/home/max/Documents/JMLGPT/tmp/GCD.java:3: verify: Precondition conjunct is false: num2 != 1
	//@ requires num2 != 1;
	                  ^
/home/max/Documents/JMLGPT/tmp/GCD.java:35: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:115:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:115: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:35:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:43: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
6 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 < 1;
	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:114:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:114: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:34:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:42: verify: Precondition conjunct is false: num1 < 1
	//@ requires num1 < 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 != 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:113:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:113: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:34:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:44: verify: Precondition conjunct is false: num1 != 1
	//@ requires num1 != 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 <= 1;
	//@ requires num1 == 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:112:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:112: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:34:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:42: verify: Precondition conjunct is false: num1 <= 1
	//@ requires num1 <= 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 == 1;
	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:34: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:111:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:111: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:34:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:42: verify: Precondition conjunct is false: num1 == 1
	//@ requires num1 == 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result >= 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:39: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method gcd
		return result;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:39:
	//@ ensures \result >= 1;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 < 0;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:109:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:109: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:43: verify: Precondition conjunct is false: num1 < 0
	//@ requires num1 < 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 <= 0;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:108:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:108: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:43: verify: Precondition conjunct is false: num1 <= 0
	//@ requires num1 <= 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 == 0;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:107:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:107: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:43: verify: Precondition conjunct is false: num1 == 0
	//@ requires num1 == 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 < -1;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:106:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:106: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:46: verify: Precondition conjunct is false: num1 < -1
	//@ requires num1 < -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 <= -1;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:105:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:105: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:46: verify: Precondition conjunct is false: num1 <= -1
	//@ requires num1 <= -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 == -1;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:104:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:104: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:46: verify: Precondition conjunct is false: num1 == -1
	//@ requires num1 == -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 < 1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:103:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:103: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: num2 < 1
	//@ requires num2 < 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 <= 1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:33: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:102:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:102: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:33:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: num2 <= 1
	//@ requires num2 <= 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result != num1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:29: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:14:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:14: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:29:
	//@ ensures \result != num1;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result != num2;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:28: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:8:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:8: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:28:
	//@ ensures \result != num2;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 == 1;
	//@ requires num2 != 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:99:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:99: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: num2 != 1
	//@ requires num2 != 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 == 1;
	//@ requires num2 >= 1;
	//@ requires num2 > 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:98:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:98: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: num2 > 1
	//@ requires num2 > 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 == 1;
	//@ requires num2 >= 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:97:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:97: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:47: verify: Precondition conjunct is false: num2 == 1
	//@ requires num2 == 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 < 0;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:96:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:96: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: num2 < 0
	//@ requires num2 < 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 <= 0;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:95:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:95: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: num2 <= 0
	//@ requires num2 <= 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 == 0;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:31: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:94:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:94: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:31:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: num2 == 0
	//@ requires num2 == 0;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result > 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:23: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:4:) in method gcd
			return -1;	
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:4: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:23:
	//@ ensures \result > 1;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 < -1;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:92:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:92: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:50: verify: Precondition conjunct is false: num2 < -1
	//@ requires num2 < -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 <= -1;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:91:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:91: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:50: verify: Precondition conjunct is false: num2 <= -1
	//@ requires num2 <= -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 == -1;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:90:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:90: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:50: verify: Precondition conjunct is false: num2 == -1
	//@ requires num2 == -1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 == num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:89:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:89: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:55: verify: Precondition conjunct is false: num2 == num1
	//@ requires num2 == num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 != num1;
	//@ requires num2 >= num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:88:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:88: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:56: verify: Precondition conjunct is false: num2 >= num1
	//@ requires num2 >= num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 != num1;
	//@ requires num2 > num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:87:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:87: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:56: verify: Precondition conjunct is false: num2 > num1
	//@ requires num2 > num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 < num1;
	//@ requires num2 <= num1;
	//@ requires num2 != num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:86:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:86: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Precondition conjunct is false: num2 < num1
	//@ requires num2 < num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 <= num1;
	//@ requires num2 != num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:85:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:85: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Precondition conjunct is false: num2 <= num1
	//@ requires num2 <= num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 > 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:84:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:84: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:39: verify: Precondition conjunct is false: num1 > 1
	//@ requires num1 > 1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires num2 != num1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:83:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:83: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: num2 != num1
	//@ requires num2 != num1;
	                  ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result == 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:82:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:82: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: Precondition conjunct is false: result == 1
	//@ requires result == 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result < 1;
	//@ requires result <= 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:81:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:81: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result < 1
	//@ requires result < 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 1;
	//@ requires result != 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:80:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:80: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Precondition conjunct is false: result != 1
	//@ requires result != 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:79:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:79: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result <= 1
	//@ requires result <= 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result >= 1;
	//@ requires result > 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:78:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:78: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Precondition conjunct is false: result > 1
	//@ requires result > 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result >= 1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:77:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:77: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result >= 1
	//@ requires result >= 1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result < 0;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:30: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:76:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:76: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:30:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result < 0
	//@ requires result < 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:22: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:5:) in method gcd
			return -1;	
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:22:
	//@ ensures \result >= 0;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result == 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:29: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:74:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:74: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:29:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result == 0
	//@ requires result == 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result > 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:21: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:5:) in method gcd
			return -1;	
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:5: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:21:
	//@ ensures \result > 0;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result != 0;
	//@ requires result >= 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:72:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:72: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:28:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result >= 0
	//@ requires result >= 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result != 0;
	//@ requires result > 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:71:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:71: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:28:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result > 0
	//@ requires result > 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result != 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:28: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:70:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:70: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:28:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:51: verify: Precondition conjunct is false: result != 0
	//@ requires result != 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures \result > num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:24: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:11:) in method gcd
			return (num1 > num2) ? num1 : num2;
			^
/home/max/Documents/JMLGPT/tmp/GCD.java:11: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:24:
	//@ ensures \result > num1;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result > num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:32: verify: The prover cannot establish an assertion (Postcondition: /home/max/Documents/JMLGPT/tmp/GCD.java:6:) in method gcd
		return result;
		^
/home/max/Documents/JMLGPT/tmp/GCD.java:6: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:32:
	//@ ensures \result > num2;
	    ^
2 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result == num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:67:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:67: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:51: verify: Precondition conjunct is false: result == num2
	//@ requires result == num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result >= num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:66:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:66: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result >= num2
	//@ requires result >= num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result > num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:65:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:65: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result > num2
	//@ requires result > num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result == -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:64:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:64: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: Precondition conjunct is false: result == -1
	//@ requires result == -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result != -1;
	//@ requires result >= -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:63:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:63: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:55: verify: Precondition conjunct is false: result >= -1
	//@ requires result >= -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result < -1;
	//@ requires result <= -1;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:62:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:62: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result < -1
	//@ requires result < -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result <= -1;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:61:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:61: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Precondition conjunct is false: result <= -1
	//@ requires result <= -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= 0;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:60:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:60: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result <= 0
	//@ requires result <= 0;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result < num2;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:59:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:59: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result < num2
	//@ requires result < num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result == num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:58:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:58: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: Precondition conjunct is false: result == num1
	//@ requires result == num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= num2;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:57:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:57: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result <= num2
	//@ requires result <= num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result < num1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:56:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:56: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:51: verify: Precondition conjunct is false: result < num1
	//@ requires result < num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result != num2;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:55:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:55: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result != num2
	//@ requires result != num2;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result != -1;
	//@ requires result > -1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:54:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:54: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: result > -1
	//@ requires result > -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result != -1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:53:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:53: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result != -1
	//@ requires result != -1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= num1;
	//@ requires result != num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:52:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:52: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: result != num1
	//@ requires result != num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= num1;
	//@ requires result >= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:51:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:51: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Precondition conjunct is false: result >= num1
	//@ requires result >= num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result <= num1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:50:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:50: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result <= num1
	//@ requires result <= num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	//@ requires result > num1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:26: verify: The prover cannot establish an assertion (Precondition: /home/max/Documents/JMLGPT/tmp/GCD.java:49:) in method gcd
			__Loop_Invariant_Dummy1(num1, num2, result);
			                       ^
/home/max/Documents/JMLGPT/tmp/GCD.java:49: verify: Associated declaration: /home/max/Documents/JMLGPT/tmp/GCD.java:26:
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}
	                   ^
/home/max/Documents/JMLGPT/tmp/GCD.java:48: verify: Precondition conjunct is false: result > num1
	//@ requires result > num1;
	                    ^
3 verification failures

public class GCD {

	//@ ensures \result != 1;
	//@ ensures \result != 0;
	//@ ensures \result >= num2;
	//@ ensures \result != -1;
	//@ ensures \result >= -1;
	//@ ensures \result > -1;
	//@ ensures \result >= num1;
	//@ ensures num1 >= 0 ==> \result >= 0;
	//@ ensures num2 >= 0 ==> \result >= 0;
	public int gcd(int num1, int num2){
		int result = 1; 
	 	num1 = (0 <= num1) ? num1 : -num1;
		num2 = (0 <= num2) ? num2 : -num2;

		if (num1 == 0 && num2 == 0) {
			return -1;	
		}

		if (num1 == 0 || num2 == 0) { 
			return (num1 > num2) ? num1 : num2;
		}

		for (int i = 1; i <= num1 && i <= num2; i++) {
			__Loop_Invariant_Dummy1(num1, num2, result);
            if (num1 % i == 0 && num2 % i == 0) {
       			result = i;
			}
        }
		return result;
	}

	//@ requires num1 >= 1;
	//@ requires num1 != 0;
	//@ requires num1 >= 0;
	//@ requires num1 > 0;
	//@ requires num1 != -1;
	//@ requires num1 >= -1;
	//@ requires num1 > -1;
	//@ requires num2 >= 1;
	//@ requires num2 != 0;
	//@ requires num2 >= 0;
	//@ requires num2 > 0;
	//@ requires num2 != -1;
	//@ requires num2 >= -1;
	//@ requires num2 > -1;
	public static void __Loop_Invariant_Dummy1(int num1, int num2, int result) {}

	public void __HoudiniInvoker() {
        gcd(-4, 0);
        gcd(0, -4);
        gcd(4, 0);
        gcd(0, 4);
        gcd(-4, -4);
        gcd(4, 4);
        gcd(0, 0);
        gcd(-4, 4);
        gcd(4, -4);
        gcd(1, -1);
        gcd(-1, 1);
    }
}


/home/max/Documents/JMLGPT/tmp/GCD.java:27: verify: The prover cannot establish an assertion (PossiblyDivideByZero) in method gcd
            if (num1 % i == 0 && num2 % i == 0) {
                     ^
1 verification failure

